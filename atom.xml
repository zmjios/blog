<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eric&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dobest.me/"/>
  <updated>2016-06-18T07:21:44.000Z</updated>
  <id>http://www.dobest.me/</id>
  
  <author>
    <name>Eric Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android屏幕直播方案</title>
    <link href="http://www.dobest.me/blog/2016/06/17/Android%E5%B1%8F%E5%B9%95%E7%9B%B4%E6%92%AD%E6%96%B9%E6%A1%88/"/>
    <id>http://www.dobest.me/blog/2016/06/17/Android屏幕直播方案/</id>
    <published>2016-06-16T16:00:00.000Z</published>
    <updated>2016-06-18T07:21:44.000Z</updated>
    
    <content type="html">&lt;p&gt;项目需求是实时同步Android手机屏幕画面至浏览器。这里有两个挑战，一是Android如何在应用内获得屏幕实时视频流，另一个是如何在浏览器上做视频直播。经过一番折腾，确定了如下的实现方案。期间，我们也实现了手机摄像头的直播。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;演示效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/android-live-demo.gif&quot; alt=&quot;演示&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Android获取实时屏幕画面&quot;&gt;&lt;a href=&quot;#Android获取实时屏幕画面&quot; class=&quot;headerlink&quot; title=&quot;Android获取实时屏幕画面&quot;&gt;&lt;/a&gt;Android获取实时屏幕画面&lt;/h1&gt;&lt;h2 id=&quot;原理与基础设置&quot;&gt;&lt;a href=&quot;#原理与基础设置&quot; class=&quot;headerlink&quot; title=&quot;原理与基础设置&quot;&gt;&lt;/a&gt;原理与基础设置&lt;/h2&gt;&lt;p&gt;Android 5.0版本之后，支持使用&lt;code&gt;MediaProjection&lt;/code&gt;的方式获取屏幕视频流。具体的使用方法和原理如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/media-projection.png&quot; alt=&quot;MediaProjection原理&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考&lt;strong&gt;ScreenRecorder项目&lt;sup&gt;3&lt;/sup&gt;&lt;/strong&gt;的实现，我们了解到&lt;code&gt;VirtualDisplay&lt;/code&gt;可以获取当前屏幕的视频流，创建&lt;code&gt;VirtualDisplay&lt;/code&gt;只需通过&lt;code&gt;MediaProjectionManager&lt;/code&gt;获取&lt;code&gt;MediaProjection&lt;/code&gt;，然后通过&lt;code&gt;MediaProjection&lt;/code&gt;创建&lt;code&gt;VirtualDisplay&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;那么视频数据的流向是怎样的呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，Display 会将画面投影到 VirtualDisplay中；&lt;/li&gt;
&lt;li&gt;接着，VirtualDisplay 会将图像渲染到 Surface中，而这个Surface是由MediaCodec所创建的；&lt;/li&gt;
&lt;li&gt;最后，用户可以通过MediaCodec获取特定编码的视频流数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过我们的尝试发现，在这个场景下，MediaCodec只允许使用&lt;strong&gt;video/avc&lt;/strong&gt;编码类型，也就是&lt;strong&gt;RAW H.264&lt;/strong&gt;的视频编码，使用其他的编码会出现应用Crash的现象（不知是否与硬件有关？）。由于这个视频编码，后面我们与它“搏斗”了好一段时间。&lt;/p&gt;
&lt;p&gt;以下是关键部分的代码（来自&lt;strong&gt;ScreenRecorder项目&lt;sup&gt;3&lt;/sup&gt;&lt;/strong&gt;）：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;codec = MediaCodec.createEncoderByType(MIME_TYPE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mSurface = codec.createInputSurface();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mVirtualDisplay = mMediaProjection.createVirtualDisplay(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mWidth,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mHeight,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mDpi,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		DisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		mSurface,    &lt;span class=&quot;comment&quot;&gt;// 图像会渲染到Surface中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在编码之前，我们还需要设置视频编码的一些格式信息，这里我们通过&lt;code&gt;MediaFormat&lt;/code&gt;进行编码格式设置，代码如下（来自&lt;strong&gt;ScreenRecorder项目&lt;sup&gt;3&lt;/sup&gt;&lt;/strong&gt;）。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String MIME_TYPE = &lt;span class=&quot;string&quot;&gt;&quot;video/avc&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// H.264编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; FRAME_RATE = &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;;            &lt;span class=&quot;comment&quot;&gt;// 30 FPS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; IFRAME_INTERVAL = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;       &lt;span class=&quot;comment&quot;&gt;// I-frames间隔时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; TIMEOUT_US = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;prepareEncoder&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MediaFormat format = MediaFormat.createVideoFormat(MIME_TYPE, mWidth, mHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format.setInteger(MediaFormat.KEY_COLOR_FORMAT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format.setInteger(MediaFormat.KEY_BIT_RATE, mBitRate);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format.setInteger(MediaFormat.KEY_FRAME_RATE, FRAME_RATE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, IFRAME_INTERVAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    codec = MediaCodec.createEncoderByType(MIME_TYPE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    codec.configure(format, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, MediaCodec.CONFIGURE_FLAG_ENCODE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    codec.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数据获取&quot;&gt;&lt;a href=&quot;#数据获取&quot; class=&quot;headerlink&quot; title=&quot;数据获取&quot;&gt;&lt;/a&gt;数据获取&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/media-codec.png&quot; alt=&quot;MediaCodec&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图片来自Android官方文档&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;紧接着，我们需要实时获取视频流了，我们可以直接从&lt;code&gt;MediaCodec&lt;/code&gt;中获取视频数据。&lt;/p&gt;
&lt;p&gt;根据官方文档，获取视频流有两种做法。一种是通过&lt;strong&gt;异步&lt;/strong&gt;的方式获取数据，使用回调来获取&lt;code&gt;OutputBuffer&lt;/code&gt;，具体代码详见&lt;a href=&quot;https://developer.android.com/reference/android/media/MediaCodec.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里我们了解一下&lt;strong&gt;同步&lt;/strong&gt;获取的方式，由于是同步执行，为了不阻塞主线程，必然需要启动一个新线程来处理。首先，程序会进入一个循环（可以设置变量进行停止），我们通过&lt;code&gt;codec.dequeueOutputBuffer()&lt;/code&gt;方法获取到&lt;code&gt;outputBufferId&lt;/code&gt;，接着通过ID获取&lt;code&gt;buffer&lt;/code&gt;。这个&lt;code&gt;buffer&lt;/code&gt;即是我们需要用到的&lt;strong&gt;实时视频帧数据&lt;/strong&gt;了。代码如下（来自Android官方文档）：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MediaFormat outputFormat = codec.getOutputFormat(); &lt;span class=&quot;comment&quot;&gt;// 方式二&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;codec.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; outputBufferId = codec.dequeueOutputBuffer(mBufferInfo, &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (outputBufferId &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ByteBuffer outputBuffer = codec.getOutputBuffer(outputBufferId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 方式一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MediaFormat bufferFormat = codec.getOutputFormat(outputBufferId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    codec.releaseOutputBuffer(outputBufferId, …);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (outputBufferId == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    outputFormat = codec.getOutputFormat(); &lt;span class=&quot;comment&quot;&gt;// 方式二&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;codec.stop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;codec.release();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;按照&lt;strong&gt;ScreenRecorder项目&lt;sup&gt;3&lt;/sup&gt;&lt;/strong&gt;的做法，接着他使用&lt;code&gt;MediaMuxer&lt;/code&gt;的&lt;code&gt;Muxer.writeSampleData()&lt;/code&gt;方法，直接将视频流&lt;code&gt;outputBuffer&lt;/code&gt;写入了文件。&lt;/p&gt;
&lt;p&gt;然而，我们需要的是实时推流至服务器。那么，接下去应该如何实现呢？&lt;/p&gt;
&lt;h2 id=&quot;视频推流&quot;&gt;&lt;a href=&quot;#视频推流&quot; class=&quot;headerlink&quot; title=&quot;视频推流&quot;&gt;&lt;/a&gt;视频推流&lt;/h2&gt;&lt;p&gt;这里有一个小插曲，为了完成这个项目，我和同学查阅了不少资料和源码。其中有一个&lt;strong&gt;RtmpRecoder项目&lt;sup&gt;2&lt;/sup&gt;&lt;/strong&gt;使用&lt;code&gt;FFmpeg&lt;/code&gt;进行实时摄像头的&lt;code&gt;RTMP&lt;/code&gt;推流，推流的原理如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ffmpeg-push.jpg&quot; alt=&quot;FFmpeg推流&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ffmpeg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FFmpeg&lt;/a&gt;是一个大名鼎鼎的音视频转码库，它由C语言实现，因此在Java中，我们需要通过JNI进行调用，这里，我们使用了&lt;strong&gt;JavaCV&lt;sup&gt;1&lt;/sup&gt;&lt;/strong&gt;的FFmpeg转码功能。&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;注意：如果使用JavaCV并采用&lt;code&gt;mpeg1video&lt;/code&gt;格式推流至服务器，切记将声道调为0，&lt;code&gt;recorder.setAudioChannels(0)&lt;/code&gt;，否则视频会残缺不全。&lt;br&gt;&lt;/div&gt;

&lt;p&gt;说到这里，不得不吐槽一下&lt;strong&gt;JavaCV&lt;sup&gt;1&lt;/sup&gt;&lt;/strong&gt;，它没有文档，没有文档是件很可怕的事情，编程基本靠猜。而且它也没有实现FFmpeg的全部功能！！！我们为了把获取到的&lt;strong&gt;RAW H.264&lt;/strong&gt;流数据传给JavaCV费了好大功夫，曾经一度想通过调用C语言函数来完成这项工作，但没有成功！&lt;/p&gt;
&lt;p&gt;到最后黔驴技穷，只好去项目中开Issue寻求帮助，然而作者表示尚未实现该功能，WTF。好吧，毕竟开源项目，别人也没有义务去做这件事。所以最后也只能自己来解决这个问题了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/javacv-issue.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;废话不多说，既然&lt;strong&gt;JavaCV&lt;sup&gt;1&lt;/sup&gt;&lt;/strong&gt;无法完成这项工作，那么我们只好另辟蹊径。&lt;/p&gt;
&lt;p&gt;现在，有两种做法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己编写FFmpeg类库。我尝试直接使用CLI接入stream的方式实现实时推流。方法也很简单，只需要在Java中启动&lt;code&gt;FFmpeg&lt;/code&gt;进程，然后pipe输入流，再由&lt;code&gt;FFmpeg&lt;/code&gt;推流至服务器。但实践之后发现一些奇怪的问题，只好作罢。&lt;/li&gt;
&lt;li&gt;另一个方案就是徒手来处理&lt;strong&gt;RAW H.264&lt;/strong&gt;流，将转码的工作放到服务器端去实现，最后我们使用这个方案成功完成了任务。下面来看看H.264编码：&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;H-264编码&quot;&gt;&lt;a href=&quot;#H-264编码&quot; class=&quot;headerlink&quot; title=&quot;H.264编码&quot;&gt;&lt;/a&gt;H.264编码&lt;/h1&gt;&lt;p&gt;众所周知，视频编码格式种类繁多，H.264也是其中一种编码，每一种编码都有其特点和适用场景，更多信息请自行搜索，这里不多做赘述。期间，我们尝试过将上面获取到的&lt;strong&gt;RAW H.264&lt;/strong&gt;数据保存为文件，想研究视频文件为什么会呈现为&lt;strong&gt;绿屏&lt;/strong&gt;的画面。经过翻阅资料和试验我们发现，&lt;strong&gt;H.264&lt;/strong&gt;编码有着特殊的分层结构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;H.264 的功能分为两层：视频编码层(VCL, Video Coding Layer)和网络提取层(NAL, Network Abstraction Layer)。VCL 数据即编码处理的输出，它表示被压缩编码后的视频数据 序列。在 VCL 数据传输或存储之前,这些编码的 VCL 数据，先被映射或封装进 NAL 单元中。每个 NAL 单元包括一个原始字节序列负荷(RBSP, Raw Byte Sequence Payload)、一组对应于视频编码的 NAL 头信息。RBSP 的基本结构是：在原始编码数据的后面填加了结尾比特。一个bit“1”若干比特“0”，以便字节对齐。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/nal.png&quot; alt=&quot;NAL&quot;&gt;&lt;/p&gt;
&lt;p&gt;因此，为了将帧序列变成合法的H.264编码，我们需要手动构建&lt;strong&gt;NAL单元&lt;/strong&gt;。H.264的帧是以&lt;strong&gt;NAL单元&lt;/strong&gt;为单位进行封装的，NAL单元的结构如上图所示。H.264分为&lt;code&gt;Annexb&lt;/code&gt;和&lt;code&gt;RTP&lt;/code&gt;两种格式，&lt;code&gt;RTP&lt;/code&gt;格式更适合用于网络传输，因为其结构更加节省空间，但由于Android系统提供的数据本身就是&lt;code&gt;Annexb&lt;/code&gt;格式的，因此我们采用&lt;code&gt;Annexb&lt;/code&gt;格式进行传输。&lt;/p&gt;
&lt;p&gt;按照&lt;code&gt;Annexb&lt;/code&gt;格式的要求，我们需要将数据封装为如下格式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0000 0001 + SPS + 0000 0001 + PPS + 0000 0001 + 视频帧（IDR帧）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;H.264的SPS和PPS串，包含了初始化H.264解码器所需要的信息参数，包括编码所用的profile，level，图像的宽和高，deblock滤波器等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后不断重复以上格式即可输出正确的&lt;strong&gt;H.264&lt;/strong&gt;编码的视频流了。这里的SPS和PPS在每一个NAL单元中重复存在，主要是适用于流式传播的场景，设想一下如果流式传播过程中漏掉了开头的SPS和PPS，那么整个视频流将永远无法被正确解码。&lt;/p&gt;
&lt;p&gt;因此我们在实践过程中，SPS和PPS只传递了一次，这样的方式比较适合我们的项目场景，也比较省流量。因此在我们的方案中，格式变为如下形式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0000 0001 + SPS + 0000 0001 + PPS + 0000 0001 + 视频帧（IDR帧）+ 0000 0001 + 视频帧 + ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;H.264编码比较复杂，我也只是在做项目期间查阅一些资料才有一点大概的了解，然后在项目完成之后才去反思和理解背后的原理。如果要深入学习，可以查阅相关的资料（&lt;strong&gt;H.264视频压缩标准&lt;sup&gt;5&lt;/sup&gt;&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;介绍完&lt;strong&gt;H.264&lt;/strong&gt;的基本原理，下面看看Android上具体的实现。其实Android系统的&lt;code&gt;MediaCodec&lt;/code&gt;类库已经帮助我们完成了较多的工作，我们只需要在开始录制时（或每一次传输视频帧前）在视频帧之前写入SPS和PPS信息即可。&lt;code&gt;MediaCodec&lt;/code&gt;已经默认在数据流（视频帧和SPS、PPS）之前添加了&lt;code&gt;start code&lt;/code&gt;(0x01)，我们不需要手动填写。&lt;/p&gt;
&lt;p&gt;SPS和PPS分别对应了&lt;code&gt;bufferFormat&lt;/code&gt;中的&lt;code&gt;csd-0&lt;/code&gt;和&lt;code&gt;csd-1&lt;/code&gt;字段。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (outputBufferId == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MediaFormat outputFormat = codec.getOutputFormat();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	outputFormat.getByteBuffer(&lt;span class=&quot;string&quot;&gt;&quot;csd-0&quot;&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;// SPS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	outputFormat.getByteBuffer(&lt;span class=&quot;string&quot;&gt;&quot;csd-1&quot;&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;// PPS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* 然后直接写入传输流 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;服务器端&quot;&gt;&lt;a href=&quot;#服务器端&quot; class=&quot;headerlink&quot; title=&quot;服务器端&quot;&gt;&lt;/a&gt;服务器端&lt;/h1&gt;&lt;p&gt;实时的数据流通过Socket(tcp)传输到服务器端，服务器端采用&lt;code&gt;Node.js&lt;/code&gt;实现视频流转码和&lt;code&gt;WebSocket&lt;/code&gt;转播。为了使前端可以播放实时的视频，我们必须将格式转换为前端支持的视频格式，这里解码使用&lt;code&gt;FFmpeg&lt;/code&gt;的Node.js封装（&lt;strong&gt;stream-transcoder项目&lt;sup&gt;6&lt;/sup&gt;&lt;/strong&gt;）。以下是Socket通讯和转码的关键代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Transcoder = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;stream-transcoder&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; net = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;net&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;sock&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sock.on(&lt;span class=&quot;string&quot;&gt;&#39;close&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;CLOSED: &#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.remoteAddress + &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; + sock.remotePort);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sock.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, (err) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 转码  H.264 =&amp;gt; mpeg1video&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Transcoder(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .size(width, height)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .fps(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .videoBitrate(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .format(&lt;span class=&quot;string&quot;&gt;&#39;mpeg1video&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .channels(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .stream()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      .on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// WebSocket转播&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        socketServer.broadcast(data, &amp;#123;binary:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).listen(&lt;span class=&quot;number&quot;&gt;9091&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Web直播&quot;&gt;&lt;a href=&quot;#Web直播&quot; class=&quot;headerlink&quot; title=&quot;Web直播&quot;&gt;&lt;/a&gt;Web直播&lt;/h1&gt;&lt;p&gt;紧接着，Web前端与服务器建立&lt;code&gt;WebSocket&lt;/code&gt;连接，使用&lt;strong&gt;jsmpeg项目&lt;sup&gt;7&lt;/sup&gt;&lt;/strong&gt;对mpeg1video的视频流进行解码并呈现在Canvas上。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; client = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; WebSocket(&lt;span class=&quot;string&quot;&gt;&#39;ws://127.0.0.1:9092/&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;videoCanvas&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; player = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; jsmpeg(client, &amp;#123;canvas:canvas&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后续还可以做一些灵活的配置以及错误处理，可以让整个直播的流程更加稳定。至于视频方面的优化，也可以继续尝试各种参数的调节等等。&lt;/p&gt;
&lt;p&gt;为了完成这个项目，我们前后花费了四五天的时间，进行各种摸索和尝试，所以我决定记录下这个方案，希望可以帮到有需要的人。&lt;/p&gt;
&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;参考&lt;a href=&quot;https://github.com/bytedeco/javacv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaCV&lt;/a&gt;项目&lt;/li&gt;
&lt;li&gt;参考&lt;a href=&quot;https://github.com/beautifulSoup/RtmpRecoder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RtmpRecoder开源项目&lt;/a&gt;的实现&lt;/li&gt;
&lt;li&gt;参考&lt;a href=&quot;https://github.com/yrom/ScreenRecorder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ScreenRecorder开源项目&lt;/a&gt;的实现&lt;/li&gt;
&lt;li&gt;参考&lt;a href=&quot;https://developer.android.com/reference/android/media/MediaCodec.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;文献&lt;a href=&quot;http://www.axis.com/files/whitepaper/wp_h264_34203_cn_0901_lo.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;H.264视频压缩标准&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;a href=&quot;https://github.com/trenskow/stream-transcoder.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stream-transcoder项目&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;a href=&quot;https://github.com/phoboslab/jsmpeg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsmpeg项目&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;项目需求是实时同步Android手机屏幕画面至浏览器。这里有两个挑战，一是Android如何在应用内获得屏幕实时视频流，另一个是如何在浏览器上做视频直播。经过一番折腾，确定了如下的实现方案。期间，我们也实现了手机摄像头的直播。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>北美实习求职记(一)</title>
    <link href="http://www.dobest.me/blog/2016/06/16/%E5%8C%97%E7%BE%8E%E5%AE%9E%E4%B9%A0%E6%B1%82%E8%81%8C%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://www.dobest.me/blog/2016/06/16/北美实习求职记(一)/</id>
    <published>2016-06-15T16:00:00.000Z</published>
    <updated>2016-06-17T06:18:37.000Z</updated>
    
    <content type="html">&lt;p&gt;待记&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;待记&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用React Native一年后的感受</title>
    <link href="http://www.dobest.me/blog/2016/06/12/%E4%BD%BF%E7%94%A8React%20Native%E4%B8%80%E5%B9%B4%E5%90%8E%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>http://www.dobest.me/blog/2016/06/12/使用React Native一年后的感受/</id>
    <published>2016-06-11T16:00:00.000Z</published>
    <updated>2016-06-13T04:43:46.000Z</updated>
    
    <content type="html">&lt;p&gt;当我在面试&lt;a href=&quot;https://discordapp.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Discord&lt;/a&gt;的时候，技术主管Stanislav跟我说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native&lt;/a&gt;代表着未来。等它一发布，我们就会用它从零构建iOS应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名原生iOS开发者，基于先前使用PhoneGap的经验，我非常怀疑使用Web技术构建移动应用的这种方式。但是当我学习并使用React Native一段时间之后，我非常庆幸我们做了这个决定。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;开发效率&quot;&gt;&lt;a href=&quot;#开发效率&quot; class=&quot;headerlink&quot; title=&quot;开发效率&quot;&gt;&lt;/a&gt;开发效率&lt;/h2&gt;&lt;p&gt;虽然iOS“团队”只有我自己一个人，但是iOS应用开发依然可以赶上Web和桌面应用开发闪电般的速度。Apple公司已经允许开发者使用&lt;code&gt;JavaScriptCore&lt;/code&gt;进行应用的升级，而无需等待App Store的审核流程。这对于那些缺乏专业的iOS QA（质量保障）团队的小公司来说是非常便利的，因为iOS团队可以在发布新功能之后进行热更新。&lt;/p&gt;
&lt;p&gt;使用React Native一年之后，我们的iOS开发周期明显变快了，这得益于很高的开发效率。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于现有的前端架构，我们在两周之内就发布了V1.0的版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相比于&lt;code&gt;Auto Layout&lt;/code&gt;，基于&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flexbox&lt;/a&gt;的样式可以节省一半的代码，并且更容易理解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用Flux设计模式，iOS和Web应用共享了&lt;code&gt;store&lt;/code&gt;和&lt;code&gt;action&lt;/code&gt;的98%的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;p&gt;React Native在后台线程运行JavaScript并发送极小的代码到主线程中。事实证明，React Native相比于Objective-C或Swift编写的原生iOS应用来说有一些性能差异！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/discord-perf.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Reactiflux小组的性能演示，该组有超过1.1万个会员 —— UI和JS线程大多数都是60FPS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，我们当初开始构建iOS应用时发现&lt;strong&gt;聊天滚动视图&lt;/strong&gt;的性能并不令人满意，尤其是一些活跃的聊天分组。于是，我们决定使用&lt;a href=&quot;http://componentkit.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ComponentKit&lt;/a&gt;构建聊天视图并编写必要的桥接代码代替原有的方案。当JS线程在完成一些繁重任务的时候，类库也无法提供原生那样流畅的动画（译注：之前动画是在JS线程执行，&lt;a href=&quot;https://github.com/facebook/react-native/commit/19e2388a76a7792ace166b64b9f1fc4695b62f1f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;目前有人提交了一份代码&lt;/a&gt;，有望使用原生iOS动画接口），因此我们在抽屉侧滑动画上继续使用&lt;a href=&quot;https://github.com/facebook/pop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PopAnimation&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注： 作者称该应用仅聊天视图和抽屉动画是原生代码实现的，其他均由React Native实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当React Native Android版本发布时，我们也尝试在Android设备上运行应用，但遗憾的是，我们遇到了一些性能问题，只好暂时放弃。Android开发主管Miguel是这样说的：&lt;/p&gt;
&lt;div class=&quot;tip&quot;&gt;&lt;br&gt;很遗憾，不同Android设备的性能差异很大，这点明显落后于iOS。我们可以让应用运行地很快，但是性能——尤其是触摸事件，即使在更高端设备上也不能令人满意。并且在早期，由于React Native Android缺乏完善的功能，我们从产品原型过渡到成品应用比iOS花费了更多时间。&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;可用性&quot;&gt;&lt;a href=&quot;#可用性&quot; class=&quot;headerlink&quot; title=&quot;可用性&quot;&gt;&lt;/a&gt;可用性&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/discord-usability.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;React Native让开发工作更简洁，使得开发者可以专注于每个新版本核心功能的开发。应用内自带的开发者菜单为我节省了大量的时间。&lt;/p&gt;
&lt;p&gt;其中我最喜欢的一个功能是&lt;code&gt;Show Inspector&lt;/code&gt;（审查工具），它可以即时展现交互视图的层级结构以及被选组件中所有必要的样式信息，这无疑是我用过的最棒的iOS审查工具。&lt;/p&gt;
&lt;h2 id=&quot;社区&quot;&gt;&lt;a href=&quot;#社区&quot; class=&quot;headerlink&quot; title=&quot;社区&quot;&gt;&lt;/a&gt;社区&lt;/h2&gt;&lt;p&gt;React Native项目每&lt;strong&gt;两周&lt;/strong&gt;会发布一个新版本，其中包含一些新的特性以及修复的bug。这有利有弊，好比iOS几个月的稳定版本的发布，新的代码需要额外的时间进行升级，尤其是生产环境中的应用。因此，这也是到目前为止我们fork的React Native仓库只有四次主要升级的原因。&lt;/p&gt;
&lt;p&gt;由于React Native还不太成熟，资源有限，也不完整。但随着它越来越流行，在不久之后一定能赶上其他成熟的技术。下面列出了一些实用的资源，我也经常在它的仓库上提问和获取最新的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reactiflux上的&lt;a href=&quot;https://discord.gg/0ZcbPKXt5bWVQmld&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;#react-native&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://js.coach/react-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;js.coach&lt;/a&gt;—React Native开源组件列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jondot/awesome-react-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;awesome-react-native&lt;/a&gt;—大量的React Native文章、教程和示例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;译注：中文资源：&lt;a href=&quot;https://github.com/reactnativecn/react-native-guide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native学习指南&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;总的来说，React Native很有潜力，它把我们团队的移动应用开发带上了一个新的台阶。像我这样原生的iOS开发者可以平滑地过渡到React Native，这有些出乎我的意料。同时，它也帮助我扩展职业技能，因为我也可以很轻松地向React编写的Web应用贡献代码了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;当我在面试&lt;a href=&quot;https://discordapp.com/&quot;&gt;Discord&lt;/a&gt;的时候，技术主管Stanislav跟我说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt;代表着未来。等它一发布，我们就会用它从零构建iOS应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名原生iOS开发者，基于先前使用PhoneGap的经验，我非常怀疑使用Web技术构建移动应用的这种方式。但是当我学习并使用React Native一段时间之后，我非常庆幸我们做了这个决定。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2015年小结</title>
    <link href="http://www.dobest.me/blog/2015/12/31/2015%E5%B9%B4%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.dobest.me/blog/2015/12/31/2015年小结/</id>
    <published>2015-12-30T16:00:00.000Z</published>
    <updated>2016-06-12T08:11:18.000Z</updated>
    
    <content type="html">&lt;p&gt;今天是2015年最后一天了，今年也经历了不少的事情，写点文字做个收尾吧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;流水账&quot;&gt;&lt;a href=&quot;#流水账&quot; class=&quot;headerlink&quot; title=&quot;流水账&quot;&gt;&lt;/a&gt;流水账&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2月，年初给常胤师兄投了一份简历，然后开始准备前端的面试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3月，经过几轮面试，拿到了人生中第一份Offer，当时怎么也没想到自己这么快就能去理想中的公司实习。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4月，在github整理了一份React Native学习材料，目前快突破3000star大关。由于最近关注React不太多，2016年尽量把更好的资料整理出来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5月，收到一些工作或合作的邀请。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;6月，图灵图书工作人员找到我，希望能参与React Native书籍编写工作。由于本身缺少实战经验，加上还是个学生，暂时无法胜任，最后商量进行Learng React Native这本书的翻译工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;7月，入职阿里，赶上了RDC团队的outing，在莫干山度了三天假，还被“强制”跳了无节操的草裙舞，不过玩的很开心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;8月，实习，工作，学习，认识了一些朋友。我们在杭州的软件设计竞赛拿了全国一等奖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;10月，返校读书。负责东北大学官方网站的开发工作。看似非常简单的几个网页，实际开发起来费不少力气。如果做每一件事情，都可以有新的收获，那么它就是值得的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;11月，进行社团技术培训。参加了HackShanghai黑客马拉松，连续编程24小时，最后我们团队三个人都跪了，最后拿了一个Top9。还参加饿了么黑客马拉松比赛，有些累，不过很有收获，虽然没有进总决赛，不过值得了！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;12月，由于李老师离职，书籍翻译的事儿泡汤。于是商量如果有时间的话，来年翻译另一本。然后就是做了一个新简历，不断的海投，已经收到一些公司的拒信了，还做了其中一家公司的OA，最后也是跪。不过这只是一个开始，我相信自己可以的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;技术成长&quot;&gt;&lt;a href=&quot;#技术成长&quot; class=&quot;headerlink&quot; title=&quot;技术成长&quot;&gt;&lt;/a&gt;技术成长&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;可以说2015年是我技术最长进的一年了。&lt;/li&gt;
&lt;li&gt;前端技术更扎实了。不多说了，做好喜爱的事。&lt;/li&gt;
&lt;li&gt;服务端开发，尤其是各种并发模型方面，也有更深刻的理解了。&lt;/li&gt;
&lt;li&gt;简单学习了一下 Android &amp;amp; iOS，感觉跟前端有很多共同点。&lt;/li&gt;
&lt;li&gt;重拾 Java 和 Go，静态类型语言也很有趣。&lt;/li&gt;
&lt;li&gt;开始尝试造轮子，醍醐灌顶。&lt;/li&gt;
&lt;li&gt;Github经营得不错。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;个人成长&quot;&gt;&lt;a href=&quot;#个人成长&quot; class=&quot;headerlink&quot; title=&quot;个人成长&quot;&gt;&lt;/a&gt;个人成长&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;步入职场，体会了很多为人处事方面的道理。&lt;/li&gt;
&lt;li&gt;上台更放松，能较好地给别人做分享。&lt;/li&gt;
&lt;li&gt;渐渐地克服浮躁的心理，认识了非常多优秀的人，自知差距，仍需戒骄戒躁，不断努力，踏实做事。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;展望2016&quot;&gt;&lt;a href=&quot;#展望2016&quot; class=&quot;headerlink&quot; title=&quot;展望2016&quot;&gt;&lt;/a&gt;展望2016&lt;/h1&gt;&lt;p&gt;2016年，我希望能找到一个理想的公司实习。希望自己能更努力地打好基础，继续提高技术水平，抓住机会，取得进步。2016，要为自己将来的发展做一个决定了，这将又会是一个分岔路口，我应该慎重地做决定。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyway, good luck, 2016!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2015年最后一天了，今年也经历了不少的事情，写点文字做个收尾吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Some thoughts on ele.me hackathon</title>
    <link href="http://www.dobest.me/blog/2015/12/12/Some%20thoughts%20on%20ele.me%20hackathon/"/>
    <id>http://www.dobest.me/blog/2015/12/12/Some thoughts on ele.me hackathon/</id>
    <published>2015-12-11T16:00:00.000Z</published>
    <updated>2016-06-12T08:06:39.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;What’s-this&quot;&gt;&lt;a href=&quot;#What’s-this&quot; class=&quot;headerlink&quot; title=&quot;What’s this?&quot;&gt;&lt;/a&gt;What’s this?&lt;/h1&gt;&lt;p&gt;Well, this is my first time to write articles in English. Recently, I attend an activity named Ele.me Hackathon(www.ele.me is a company provides campus food take-out service.) with&lt;br&gt;my senior fellow student, he is very well-qualified with techniques who is learning Data Mining as a graduate in NEU. We’re both instered in this kind of contest and then we&lt;br&gt;decide to participate in.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;How-it-plays&quot;&gt;&lt;a href=&quot;#How-it-plays&quot; class=&quot;headerlink&quot; title=&quot;How it plays?&quot;&gt;&lt;/a&gt;How it plays?&lt;/h1&gt;&lt;p&gt;First of all, we read the specification of the activity on their gitlab. What we should do is to develop an high-performance server program according to their requirement by using&lt;br&gt;languages Python, Java or Golang and they provide a small cluster consists of 3 servers and 1 mysql machine and 1 redis machine. The requirement is to implement services such as &lt;code&gt;sign in&lt;/code&gt;, &lt;code&gt;sign up&lt;/code&gt;, &lt;code&gt;view food&lt;/code&gt;, &lt;code&gt;add to cart&lt;/code&gt;, &lt;code&gt;place order&lt;/code&gt;, &lt;code&gt;view orders&lt;/code&gt;, they provides&lt;br&gt;&lt;code&gt;Vagrant&lt;/code&gt; virtual machine with Redis, Mysql, Runtime and Data installed in it. Obviously, they also provides us with unit tests and benchmark. All we should do is to improve&lt;br&gt;the benchmark score as high as possible in condition of passing all unit tests.&lt;/p&gt;
&lt;p&gt;After discussing, we finally decided to implement it by Java which is high performance and high concurrency. Because of time limited, we chose &lt;code&gt;Jetty&lt;/code&gt; to deal with HTTP&lt;br&gt;requests. And then we built up different layers such as Model, Action, Service and Storage. It looks well origanized and pretty nice, but unfortunately, we struggled to pass all the test cases, only to find that we just got about &lt;code&gt;40+&lt;/code&gt; s/per order of benchmark in local machine.&lt;/p&gt;
&lt;h1 id=&quot;Hardship&quot;&gt;&lt;a href=&quot;#Hardship&quot; class=&quot;headerlink&quot; title=&quot;Hardship&quot;&gt;&lt;/a&gt;Hardship&lt;/h1&gt;&lt;p&gt;During contest, my teammate Zhi Wang flied to New York for a conference only left me doing the coding.&lt;/p&gt;
&lt;p&gt;I had to think about that &lt;code&gt;why our program&amp;#39;s concurrency is so low?&lt;/code&gt;, we know &lt;code&gt;Jetty&lt;/code&gt; is also using &lt;code&gt;NIO&lt;/code&gt;, but maybe the framework is a bit heavy. Because of my previous hand-on experience of Golang, I finally decided to using golang by following reasons, firstly, I am not familiar with either  Java or Golang because I was devoted to Front-end Techniques before. Moreover, I think go is more clean and simple than Java especially in high-concurrency aspect. So I spent two night coding and finished the first version. Finally, we got &lt;code&gt;80+&lt;/code&gt; per order/s concurrency in local machine and got &lt;code&gt;573+&lt;/code&gt; per order/s in remote server which makes us be &lt;code&gt;top 20&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And then we considered that we were in the right directions. we continued to do &lt;code&gt;profiling&lt;/code&gt; works, replacing those slow or blocking operations. One thing that I have to mention is &lt;code&gt;Redis&lt;/code&gt;, it’s a &lt;code&gt;cache&lt;/code&gt; but is not so easy to tackle with. The strategy we use is to store &lt;code&gt;immutable&lt;/code&gt; data in memory and &lt;code&gt;mutable&lt;/code&gt; data in &lt;code&gt;Redis&lt;/code&gt; cache to share the state between three machines. &lt;/p&gt;
&lt;p&gt;However, the way how we define the storage structure in Redis influence a lot. If we use JSON marshal, we can easily store and fetch it, but it will cause some performance loss. If we use &lt;code&gt;hash table&lt;/code&gt; or some built-in structures, we will be caught in dealing with storage design. Because of ambition, we finally choose the the latter one solution and use more basic HTTP handler, unfortunately, we didn’t get the expected result.&lt;/p&gt;
&lt;h1 id=&quot;Final-Struggle&quot;&gt;&lt;a href=&quot;#Final-Struggle&quot; class=&quot;headerlink&quot; title=&quot;Final Struggle&quot;&gt;&lt;/a&gt;Final Struggle&lt;/h1&gt;&lt;p&gt;We had tried almost every methods we know to improve it. One day of the last days, Zhi Wang suddenly sent me a link, which is a example of high concurrency server by &lt;code&gt;Redis&lt;/code&gt;and built-in &lt;code&gt;Lua&lt;/code&gt;. We were all excited, “This must be definitely right solution”. It was just five days left, and we quickly finished &lt;code&gt;Lua&lt;/code&gt; script and built it into &lt;code&gt;Golang&lt;/code&gt;. When we had done, we found it doesn’t pass the test cases because of &lt;code&gt;data consistency&lt;/code&gt;, is there &lt;code&gt;data race&lt;/code&gt; happens or something wrong in our code? Redis’s lua runs in serial ways which is not expected to perform in that way. We can’t solve it even in the last day. &lt;/p&gt;
&lt;p&gt;But it just happened intermittently, luckily, we got &lt;code&gt;300+&lt;/code&gt; per order/s in local machine which is what we were expected. But because of request failure, we finally couldn’t catch up with top 20. After that, we found the solution we choose was almost the same of the official implementation.&lt;/p&gt;
&lt;h1 id=&quot;Introspection&quot;&gt;&lt;a href=&quot;#Introspection&quot; class=&quot;headerlink&quot; title=&quot;Introspection&quot;&gt;&lt;/a&gt;Introspection&lt;/h1&gt;&lt;p&gt;After contest, we discussed the failure of requests failure. In request handler, we run a &lt;code&gt;goroutine&lt;/code&gt; each request, which is quite a lot expense.&lt;br&gt;In concurrent system, we thought,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We should design a &lt;code&gt;Request Queue&lt;/code&gt; to &lt;code&gt;Enqueue&lt;/code&gt; each request and &lt;code&gt;Dequeue&lt;/code&gt; to process every request later on instead of hanlding instantly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache&lt;/code&gt; will do benefit to system performance but we should make some efforts to design it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consistency&lt;/code&gt; is very improtant in distributed system or we will get error in procedure.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s it, althought we didn’t got prize in this contest finally, we learnt a lot about &lt;code&gt;High Concurrency&lt;/code&gt; and &lt;code&gt;Distributed System&lt;/code&gt;, that’s what we want to do and steep in.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ele828/eleme-hackathon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;=&amp;gt;Open source code &lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What’s-this&quot;&gt;&lt;a href=&quot;#What’s-this&quot; class=&quot;headerlink&quot; title=&quot;What’s this?&quot;&gt;&lt;/a&gt;What’s this?&lt;/h1&gt;&lt;p&gt;Well, this is my first time to write articles in English. Recently, I attend an activity named Ele.me Hackathon(www.ele.me is a company provides campus food take-out service.) with&lt;br&gt;my senior fellow student, he is very well-qualified with techniques who is learning Data Mining as a graduate in NEU. We’re both instered in this kind of contest and then we&lt;br&gt;decide to participate in.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>东大官网开发记录</title>
    <link href="http://www.dobest.me/blog/2015/11/04/%E4%B8%9C%E5%A4%A7%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.dobest.me/blog/2015/11/04/东大官网开发记录/</id>
    <published>2015-11-03T16:00:00.000Z</published>
    <updated>2016-06-12T08:06:45.000Z</updated>
    
    <content type="html">&lt;p&gt;参与 &lt;a href=&quot;http://neu.edu.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;东北大学官网&lt;/a&gt; 的开发工作，记录一下工作完成之后的一些收获。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;采用HTML5-CSS3技术&quot;&gt;&lt;a href=&quot;#采用HTML5-CSS3技术&quot; class=&quot;headerlink&quot; title=&quot;采用HTML5 + CSS3技术&quot;&gt;&lt;/a&gt;采用HTML5 + CSS3技术&lt;/h2&gt;&lt;p&gt;在项目初期，我们考虑到应该提升用户的浏览体验，团队经过调研、分析和讨论后决定采用一种名为“优雅降级”开发方式，即以现代浏览器为开发基准，后期再通过编写shim的方式对低版本浏览器进行兼容。这种做法一来为用户提供了更加良好的视觉和交互体验，二来也保证了广大用户即便使用低版本的浏览器，也能畅通无阻。&lt;/p&gt;
&lt;h2 id=&quot;采用sea-js模块加载器方案&quot;&gt;&lt;a href=&quot;#采用sea-js模块加载器方案&quot; class=&quot;headerlink&quot; title=&quot;采用sea.js模块加载器方案&quot;&gt;&lt;/a&gt;采用sea.js模块加载器方案&lt;/h2&gt;&lt;p&gt;新版的网站采用了模块加载器的方式实现了JavaScript代码的模块化和规范化，弥补了前端代码全局污染的缺陷。该方案同时也为团队开发带来了便捷，提高了底层代码的复用性和业务逻辑的抽象能力。&lt;/p&gt;
&lt;h2 id=&quot;屏幕适配良好&quot;&gt;&lt;a href=&quot;#屏幕适配良好&quot; class=&quot;headerlink&quot; title=&quot;屏幕适配良好&quot;&gt;&lt;/a&gt;屏幕适配良好&lt;/h2&gt;&lt;p&gt;对于屏幕的适配，我们采用css3的media queries功能分别对市面各种常见的屏幕尺寸进行了响应式适配，实现了低分辨率、普通分辨率和高分辨率屏幕的伸缩适应，最大程度满足了用户的浏览体验。对于低版本浏览器，我们同样通过shim的方式对其进行了分辨率适配。&lt;/p&gt;
&lt;h2 id=&quot;兼容性强&quot;&gt;&lt;a href=&quot;#兼容性强&quot; class=&quot;headerlink&quot; title=&quot;兼容性强&quot;&gt;&lt;/a&gt;兼容性强&lt;/h2&gt;&lt;p&gt;官网作为一个对外的信息平台，我们必须保证网页的兼容性。经过团队不断努力，我们实现了市面近乎所有浏览器的兼容性，包括 Chrome, Firefox, Safari, Opera, IE, 360浏览器, 搜狗浏览器，猎豹浏览器等。&lt;/p&gt;
&lt;h2 id=&quot;RESTful-API架构模式&quot;&gt;&lt;a href=&quot;#RESTful-API架构模式&quot; class=&quot;headerlink&quot; title=&quot;RESTful API架构模式&quot;&gt;&lt;/a&gt;RESTful API架构模式&lt;/h2&gt;&lt;p&gt;网站的数据通信采用了近年非常流行的RESTful API架构，代替了旧版的模板与框架结构。这种架构方式降低了系统间的依赖，提高了接口的灵活性和扩展性，同时减少了客户端的请求次数，提高网页加载速度。&lt;/p&gt;
&lt;h2 id=&quot;全站静态化方案&quot;&gt;&lt;a href=&quot;#全站静态化方案&quot; class=&quot;headerlink&quot; title=&quot;全站静态化方案&quot;&gt;&lt;/a&gt;全站静态化方案&lt;/h2&gt;&lt;p&gt;考虑到网站整体的安全性，我们沿用了旧版静态化的方案。这种做法极大地提高了安全性和服务器响应速度，实现更快的浏览器体验，并且也有利于搜索引擎的收录。&lt;/p&gt;
&lt;h2 id=&quot;测试覆盖率全&quot;&gt;&lt;a href=&quot;#测试覆盖率全&quot; class=&quot;headerlink&quot; title=&quot;测试覆盖率全&quot;&gt;&lt;/a&gt;测试覆盖率全&lt;/h2&gt;&lt;p&gt;为了保证网站良好的适配和兼容，我们进行了多次全面的测试。内容包括各类浏览器及其主流版本的兼容性测试，各类尺寸的屏幕响应式测试，组件的加载容错性测试以及代码review等。&lt;/p&gt;
&lt;h2 id=&quot;规范化的开发流程&quot;&gt;&lt;a href=&quot;#规范化的开发流程&quot; class=&quot;headerlink&quot; title=&quot;规范化的开发流程&quot;&gt;&lt;/a&gt;规范化的开发流程&lt;/h2&gt;&lt;p&gt;在开发期间我们进行了结构的设计，前端使用sea.js作为模块加载器，开发过程引入了grunt构建工具，采用sass预处理工具进行css编写，本地使用connect启动开发服务器，grunt-watch进行自动编译，最后使用include-replace工具对代码进行批量打包并同步到远程服务器。整个过程我们统一了开发工具链，降低团队之间协作的成本，提高了开发效率。&lt;/p&gt;
&lt;h2 id=&quot;采用git协作开发，代码开源&quot;&gt;&lt;a href=&quot;#采用git协作开发，代码开源&quot; class=&quot;headerlink&quot; title=&quot;采用git协作开发，代码开源&quot;&gt;&lt;/a&gt;采用git协作开发，代码开源&lt;/h2&gt;&lt;p&gt;此次项目一个亮点即采用了github开源社区进行代码托管，一方面为了团队协作，另一方面也希望有人能参与我们的开发给我们提供良好的建议。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;一句话总结：经过这次项目，学到了不少兼容性的知识，有收获！&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;参与 &lt;a href=&quot;http://neu.edu.cn&quot;&gt;东北大学官网&lt;/a&gt; 的开发工作，记录一下工作完成之后的一些收获。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native模块桥接详解</title>
    <link href="http://www.dobest.me/blog/2015/10/16/React%20Native%E6%A8%A1%E5%9D%97%E6%A1%A5%E6%8E%A5%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.dobest.me/blog/2015/10/16/React Native模块桥接详解/</id>
    <published>2015-10-15T16:00:00.000Z</published>
    <updated>2016-06-12T08:31:32.000Z</updated>
    
    <content type="html">&lt;p&gt;在这篇文章中，我假设你已经掌握了React Native的基础知识，并且有兴趣了解JavaScript和本地通信的内部工作原理。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;主线程&quot;&gt;&lt;a href=&quot;#主线程&quot; class=&quot;headerlink&quot; title=&quot;主线程&quot;&gt;&lt;/a&gt;主线程&lt;/h2&gt;&lt;p&gt;在开始之前，我们首先要知道React Native中的&lt;strong&gt;3个重要的线程&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shadow Queue&lt;/code&gt;: 负责布局的控制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Main Thread&lt;/code&gt;: UIKit运行的线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JavaScript Thread&lt;/code&gt;: JS代码在该线程运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，如果没有特殊说明，每一个单独的本地模块都有自己的GCD队列。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;code&gt;Shadow Queue&lt;/code&gt;顾名思义，实际上是一个GCD队列而不是一个线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;本地模块&quot;&gt;&lt;a href=&quot;#本地模块&quot; class=&quot;headerlink&quot; title=&quot;本地模块&quot;&gt;&lt;/a&gt;本地模块&lt;/h2&gt;&lt;p&gt;如果你还不知道如何创建一个本地模块，我推荐你可以先看看&lt;a href=&quot;http://facebook.github.io/react-native/docs/native-modules-ios.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是一个&lt;strong&gt;Person&lt;/strong&gt;模块，实现了JS调用本地模块的交互过程。&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;RCTBridgeModule&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Logger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_MODULE()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_METHOD(greet:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Hi, %@!&quot;&lt;/span&gt;, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [_bridge.eventDispatcher sendAppEventWithName:&lt;span class=&quot;string&quot;&gt;@&quot;greeted&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                           body:@&amp;#123; &lt;span class=&quot;string&quot;&gt;@&quot;name&quot;&lt;/span&gt;: name &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们主要来看看&lt;code&gt;RCT_EXPORT_MODULE&lt;/code&gt;和&lt;code&gt;RCT_EXPORT_METHOD&lt;/code&gt;这两个宏的实现，了解它们所扮演的角色以及内部是如何工作的。&lt;/p&gt;
&lt;h3 id=&quot;RCT-EXPORT-MODULE-js-name&quot;&gt;&lt;a href=&quot;#RCT-EXPORT-MODULE-js-name&quot; class=&quot;headerlink&quot; title=&quot;RCT_EXPORT_MODULE([js_name])&quot;&gt;&lt;/a&gt;RCT_EXPORT_MODULE([js_name])&lt;/h3&gt;&lt;p&gt;顾名思义，这个宏会导出你的模块，但在特定的环境中，&lt;code&gt;导出&lt;/code&gt;的具体含义是什么？这里的意思是把你的模块暴露给React中的&lt;code&gt;Bridge&lt;/code&gt;。&lt;br&gt;它的实现也相当简单：&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define RCT_EXPORT_MODULE(js_name) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; RCT_EXTERN &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RCTRegisterModule(Class); \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; + (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; \*)moduleName &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; @&lt;span class=&quot;meta&quot;&gt;#js_name; &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; + (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123; RCTRegisterModule(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码做了哪些事情？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;它首先声明&lt;code&gt;RCTRegisterModule&lt;/code&gt;extern`(外部)函数。意味着这个函数的实现对于编译器是不可见的，但在链接时可见。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;声明一个&lt;code&gt;moduleName&lt;/code&gt;方法，该方法返回宏的可选参数&lt;code&gt;js_name&lt;/code&gt;。这样，你就可以让你的模块在JS中有一个区别与Objective-C类名的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;声明一个&lt;code&gt;load&lt;/code&gt;方法(当app被加载到内存之后，它会调用所有类的load方法)，该方法调用上面声明的&lt;code&gt;RCTRegisterModule&lt;/code&gt;函数，让&lt;code&gt;bridge&lt;/code&gt;知道这个模块。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;RCT-EXPORT-METHOD-method&quot;&gt;&lt;a href=&quot;#RCT-EXPORT-METHOD-method&quot; class=&quot;headerlink&quot; title=&quot;RCT_EXPORT_METHOD(method)&quot;&gt;&lt;/a&gt;RCT_EXPORT_METHOD(method)&lt;/h3&gt;&lt;p&gt;这个宏更有意思，实际上他没有给你的方法添加任何东西，而是额外创建了一个新的方法。&lt;/p&gt;
&lt;p&gt;这个新的方法看起来像下面的例子一样：&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)__rct_export__120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; @[ &lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;log:(NSString *)message&quot;&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;“这是什么玩意儿？”，你一定有这样的想法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上，它是由前缀(&lt;strong&gt;rct_export&lt;/strong&gt;)，一个可选的&lt;code&gt;js_name&lt;/code&gt;(这里为空)和函数定义的行号(这里是12)还有一个__COUNTER__(累加器)的宏拼接而成的。&lt;/p&gt;
&lt;p&gt;这个方法唯一的目的就是返回一个包含&lt;code&gt;js_name&lt;/code&gt;和方法签名的字符串数组。在名字上的处理是为了避免冲突。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：如果你使用Category，这里依然可能存在两个同名的方法，虽然Xcode会有警告，但仍然会表现出异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;运行时&quot;&gt;&lt;a href=&quot;#运行时&quot; class=&quot;headerlink&quot; title=&quot;运行时&quot;&gt;&lt;/a&gt;运行时&lt;/h2&gt;&lt;p&gt;整个组装过程提供了信息给&lt;code&gt;bridge&lt;/code&gt;，所以它可以找到任何已经导出的模块和方法。但是这个过程发生在加载期间，下面我们看看在运行期它是如何被使用的。&lt;/p&gt;
&lt;p&gt;桥接初始化的依赖图：&lt;br&gt;&lt;img src=&quot;http://tadeuzagallo.com/blog/assets/img/initialisation.svg&quot; alt=&quot;inheritants&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;初始化模块&quot;&gt;&lt;a href=&quot;#初始化模块&quot; class=&quot;headerlink&quot; title=&quot;初始化模块&quot;&gt;&lt;/a&gt;初始化模块&lt;/h3&gt;&lt;p&gt;&lt;code&gt;RCTRegisterModule&lt;/code&gt;方法所做的事情就是把类添加到一个数组中，后面如果创建新的&lt;code&gt;bridge&lt;/code&gt;实例，就可以直接找到这个类了。下面，程序遍历模块数组并为每一个模块创建实例对象，然后把&lt;code&gt;bridge&lt;/code&gt;的引用赋值给模块，再把对象引用储存到&lt;code&gt;bridge&lt;/code&gt;中（实现相互调用），最后检查模块是否有指定运行的队列，如果没有则为其创建一个新的队列，从其他模块中隔离开来。&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *modulesByName; &lt;span class=&quot;comment&quot;&gt;// = ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (Class moduleClass &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; RCTGetModuleClasses()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  module = [moduleClass new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([module respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(setBridge:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    module.bridge = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  modulesByName[moduleName] = module;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置模块&quot;&gt;&lt;a href=&quot;#配置模块&quot; class=&quot;headerlink&quot; title=&quot;配置模块&quot;&gt;&lt;/a&gt;配置模块&lt;/h3&gt;&lt;p&gt;一旦我们在后台线程运行了模块，就可以列出并且调用该模块的所有以&lt;code&gt;__rct_export__&lt;/code&gt;开头的方法，也可以得到方法签名的字符串表示。这是非常重要的，这样一来，我们就知道了参数实际的类型。比如，在运行时我们只能知道参数的名称是&lt;code&gt;id&lt;/code&gt;,但通过这种方式就可以知道参数的类型是&lt;code&gt;NSString *&lt;/code&gt;了。&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; methodCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Method *methods = class_copyMethodList(moduleClass, &amp;amp;methodCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; methodCount; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Method method = methods[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SEL selector = method_getName(method);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(selector) hasPrefix:&lt;span class=&quot;string&quot;&gt;@&quot;__rct_export__&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP imp = method_getImplementation(method);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *entries = ((&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *(*)(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, SEL))imp)(_moduleClass, selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [moduleMethods addObject:&lt;span class=&quot;comment&quot;&gt;/* Object representing the method */&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装JavaScript-Executor&quot;&gt;&lt;a href=&quot;#安装JavaScript-Executor&quot; class=&quot;headerlink&quot; title=&quot;安装JavaScript Executor&quot;&gt;&lt;/a&gt;安装JavaScript Executor&lt;/h3&gt;&lt;p&gt;&lt;code&gt;JavaScript Executors&lt;/code&gt;有一个&lt;code&gt;-setUp&lt;/code&gt;方法，允许其来做一些昂贵的工作，例如在后台线程初始化一个&lt;code&gt;JavaScriptCore&lt;/code&gt;。同时，它也省去了一些不必要的工作，比如，只有激活状态下的&lt;code&gt;executor&lt;/code&gt;才会收到&lt;code&gt;setUp&lt;/code&gt;的调用指令，而不是所有的&lt;code&gt;excutor&lt;/code&gt;都会收到指令。&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JSGlobalContextRef ctx = JSGlobalContextCreate(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_context = [[RCTJavaScriptContext alloc] initWithJSContext:ctx];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;注入JSON配置&quot;&gt;&lt;a href=&quot;#注入JSON配置&quot; class=&quot;headerlink&quot; title=&quot;注入JSON配置&quot;&gt;&lt;/a&gt;注入JSON配置&lt;/h3&gt;&lt;p&gt;JSON配置仅仅包含自己模块的信息，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;remoteModuleConfig&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;Logger&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;constants&quot;: &amp;#123; /* If we had exported constants... */ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;moduleID&quot;: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;methods&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;requestPermissions&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &quot;type&quot;: &quot;remote&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &quot;methodID&quot;: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个信息被作为全局变量储存在JavaScript虚拟机中，所以JS这边的&lt;code&gt;bridge&lt;/code&gt;一被初始化就可以使用这些信息去创建模块。&lt;/p&gt;
&lt;h3 id=&quot;加载JavaScript代码&quot;&gt;&lt;a href=&quot;#加载JavaScript代码&quot; class=&quot;headerlink&quot; title=&quot;加载JavaScript代码&quot;&gt;&lt;/a&gt;加载JavaScript代码&lt;/h3&gt;&lt;p&gt;这个过程很直观，就是从指定的地方载入源码。通常，在开发期间从&lt;code&gt;packager&lt;/code&gt;下载导入，在生产环境下，直接从从本地存储加载。&lt;/p&gt;
&lt;h3 id=&quot;执行JavaScript代码&quot;&gt;&lt;a href=&quot;#执行JavaScript代码&quot; class=&quot;headerlink&quot; title=&quot;执行JavaScript代码&quot;&gt;&lt;/a&gt;执行JavaScript代码&lt;/h3&gt;&lt;p&gt;一切准备就绪，程序就可以加载JavaScriptCore虚拟机中的应用源码，拷贝、解析、执行代码。首次执行需要注册所有CommanJS模块，指明入口文件。&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JSValueRef jsError = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSStringRef execJSString = JSStringCreateWithCFString((__bridge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;)script);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSStringRef jsURL = JSStringCreateWithCFString((__bridge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;)sourceURL.absoluteString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSValueRef result = JSEvaluateScript(strongSelf-&amp;gt;_context.ctx,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    execJSString, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, jsURL, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;jsError);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSStringRelease(jsURL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSStringRelease(execJSString);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;JavaScript模块&quot;&gt;&lt;a href=&quot;#JavaScript模块&quot; class=&quot;headerlink&quot; title=&quot;JavaScript模块&quot;&gt;&lt;/a&gt;JavaScript模块&lt;/h2&gt;&lt;p&gt;模块从JSON配置中生成，在JavaScript中通过&lt;code&gt;NativeModules&lt;/code&gt;对象进行使用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123; NativeModules &amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123; Person &amp;#125; = NativeModules;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.greet(&lt;span class=&quot;string&quot;&gt;&#39;Tadeu&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种工作方式的流程是，当你调用一个方法，请求会被推进一个队列中，它包含了模块名称、方法名称和所有调用所需的参数。在JavaScript执行之后，该队列会被传回到本地去执行请求。&lt;/p&gt;
&lt;h2 id=&quot;调用周期&quot;&gt;&lt;a href=&quot;#调用周期&quot; class=&quot;headerlink&quot; title=&quot;调用周期&quot;&gt;&lt;/a&gt;调用周期&lt;/h2&gt;&lt;p&gt;如果我们用上面的代码去调用一个模块，它的流程如下：&lt;br&gt;&lt;img src=&quot;http://tadeuzagallo.com/blog/assets/img/graph.svg&quot; alt=&quot;inheritants&quot;&gt;&lt;/p&gt;
&lt;p&gt;调用从本地模块到JS。在执行期间，当调用&lt;code&gt;NativeModules&lt;/code&gt;上的方法时，程序把将会在本地执行的调用加入队列中。JS执行结束后，本地程序会遍历并运行队列中的调用请求，回调和调用结果(使用&lt;code&gt;_bridge&lt;/code&gt;实例可以通过本地模块去调用&lt;code&gt;enqueueJSCall:args:&lt;/code&gt;)最终会通过&lt;code&gt;bridge&lt;/code&gt;传回给JS。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图仅表示了JavaScript执行中期的流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注：如果你关注过该项目，曾经有一个本地到JS的调用队列，它会被指派到每一个vSYNC，但为了加快启动的速度已经将这个功能移除。&lt;/p&gt;
&lt;h2 id=&quot;参数类型&quot;&gt;&lt;a href=&quot;#参数类型&quot; class=&quot;headerlink&quot; title=&quot;参数类型&quot;&gt;&lt;/a&gt;参数类型&lt;/h2&gt;&lt;p&gt;从本地到JS的调用是比较容易的，参数被传入一个&lt;code&gt;NSArray&lt;/code&gt;然后转换成JSON。但对于来自JS的调用，需要本地类型，为此，我们显式地检查初始类型(ints, floats, chars等等)。但是正如之前所说，对于对象和结构体，运行时没有从&lt;code&gt;NSMethodSignature&lt;/code&gt;中给我们提供足够的信息，所以我们把类型保存为字符串。&lt;/p&gt;
&lt;p&gt;我们使用正则表达式从方法签名中提取类型，实际中还使用&lt;code&gt;RCTConvert&lt;/code&gt;工具类去转换对象，对于每个支持的类型它都有一个默认的方法，尝试把&lt;code&gt;JSON&lt;/code&gt;输入转换为所需的类型。&lt;/p&gt;
&lt;p&gt;除了结构体以外，我们使用&lt;code&gt;objc_msgSend&lt;/code&gt;去动态地调用方法，因为在arm64上没有&lt;code&gt;objc_msgSend_stret&lt;/code&gt;对应的版本，我们退回到&lt;code&gt;NSInvocation&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一旦我们转换了所有的参数，我们使用另一个&lt;code&gt;NSInvocation&lt;/code&gt;带着参数去调用目标模块和方法。&lt;/p&gt;
&lt;p&gt;下面是一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// If you had the following method in a given module, e.g. `MyModule`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_METHOD(methodWithArray:(NSArray *) size:(CGRect)size) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// And called it from JS, like:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;require(&#39;NativeModules&#39;).MyModule.method([&#39;a&#39;, 1], &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  y: 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width: 200,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// The JS queue sent to native would then look like the following:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ** Remember that it&#39;s a queue of calls, so all the fields are arrays **&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @[ @0 ], // module IDs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @[ @1 ], // method IDs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @[       // arguments&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @[@&quot;a&quot;, @1],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      @&amp;#123; @&quot;x&quot;: @0, @&quot;y&quot;: @0, @&quot;width&quot;: @200, @&quot;height&quot;: @100 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// This would convert into the following calls (pseudo code)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSInvocation call&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call[args][0] = GetModuleForId(@0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call[args][1] = GetMethodForId(@1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call[args][2] = obj_msgSend(RCTConvert, NSArray, @[@&quot;a&quot;, @1])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call[args][3] = NSInvocation(RCTConvert, CGRect, @&amp;#123; @&quot;x&quot;: @0, ... &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;call()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h2&gt;&lt;p&gt;正如上面提到的，每个模块默认都会有自己的GCD队列，除非通过实现&lt;code&gt;-methodQueue&lt;/code&gt;方法或跟一个有效的队列合成&lt;code&gt;methodQueue&lt;/code&gt;属性来指定了特定的运行队列。&lt;code&gt;View Manager&lt;/code&gt;(继承自RCTViewManager)是一个特例，它默认使用&lt;code&gt;Shadow Queue&lt;/code&gt;。&lt;code&gt;RCTJSThread&lt;/code&gt;也比较特殊，它仅仅是为了占位，因为它是一个线程而不是队列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;View Manager&lt;/code&gt;不是真正的特例，因为它的基类显式地指定了&lt;code&gt;shadow queue&lt;/code&gt;作为目标队列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当前线程的规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-init&lt;/code&gt;和&lt;code&gt;-setBridge&lt;/code&gt;是为了保证在主线程中被调用。&lt;/li&gt;
&lt;li&gt;所有导出的模块都保证在在目标队列中被调用。&lt;/li&gt;
&lt;li&gt;如果你实现了&lt;code&gt;RCTInvalidating&lt;/code&gt;协议，&lt;strong&gt;invalidate&lt;/strong&gt;同样保证在目标队列中被调用。&lt;/li&gt;
&lt;li&gt;不保证&lt;code&gt;-dealloc&lt;/code&gt;将会在哪个线程被调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果从JS有批量的调用请求，请求将会被目标队列分组，并行地被调度。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// group `calls` by `queue` in `buckets`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (id queue &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; buckets) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  dispatch_block_t block = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSOrderedSet *calls = [buckets objectForKey:queue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (NSNumber *indexObj &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; calls) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Actually call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (queue == RCTJSThread) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_javaScriptExecutor executeBlockOnJavaScriptQueue:block];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (queue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_async(queue, block);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;结尾&quot;&gt;&lt;a href=&quot;#结尾&quot; class=&quot;headerlink&quot; title=&quot;结尾&quot;&gt;&lt;/a&gt;结尾&lt;/h2&gt;&lt;p&gt;以上就是稍加深入地对&lt;code&gt;bridge&lt;/code&gt;的工作原理进行了介绍，我希望能对那些想开发更加复杂的模块和想为核心框架贡献代码的人能有所帮助。&lt;/p&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;http://tadeuzagallo.com/blog/react-native-bridge/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tadeuzagallo.com/blog/react-native-bridge/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在这篇文章中，我假设你已经掌握了React Native的基础知识，并且有兴趣了解JavaScript和本地通信的内部工作原理。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一点感悟</title>
    <link href="http://www.dobest.me/blog/2015/10/09/%E4%B8%80%E7%82%B9%E6%84%9F%E6%82%9F/"/>
    <id>http://www.dobest.me/blog/2015/10/09/一点感悟/</id>
    <published>2015-10-08T16:00:00.000Z</published>
    <updated>2016-06-12T07:59:24.000Z</updated>
    
    <content type="html">&lt;p&gt;最近从公司离职返校，好多人过来问我实习情况，一些人是因为好奇，另一些人希望我分享经验。这段时间确实有一些收获，由于没有总结只好搪塞。早上正好有空，好好梳理一下并展望和规划一下今后的发展，与君共勉。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;写在开头&quot;&gt;&lt;a href=&quot;#写在开头&quot; class=&quot;headerlink&quot; title=&quot;写在开头&quot;&gt;&lt;/a&gt;写在开头&lt;/h2&gt;&lt;p&gt;曾经我也抱着去阿里走一趟，能让自己成为大牛的想法，但实习完之后，老实说这方面的提高没有达到自己的预期。原因可能是公司使用技术会选择一种适合自己业务场景的方案，这种方案并不一定是最新，性能最好的，而是如何能快速开发和迭代，运行是否稳定，如何能适合更多人参与其中，降低这方面的学习成本。不可否认的是，团队里有很多技术非常牛的人，甚至还有前端界名人，他们都非常的谦虚，会耐心的跟你讨论技术。但是，我发现他们并不以自己技术有多牛为资本，职场讲究的远不止这一点。公司一般分为业务开发和基础架构两种，像国内的绝大多数公司还是以业务开发为重点（至少前端是这样），公司要能看到你的业绩，业务能最容易也最直观地体现你的业绩。所以有很多人，需要在工作之余额外抽出时间来进行基础架构的建设，实属不易。所以，作为一名程序员，技术是基础保障，但绝不是全部。不断提升技术的同时，我觉得更应该去全面发展自己，这可能会成为不少技术宅的阻碍。&lt;/p&gt;
&lt;p&gt;下面讲讲技术之外的一些收获：）&lt;/p&gt;
&lt;h2 id=&quot;学会总结&quot;&gt;&lt;a href=&quot;#学会总结&quot; class=&quot;headerlink&quot; title=&quot;学会总结&quot;&gt;&lt;/a&gt;学会总结&lt;/h2&gt;&lt;p&gt;在公司，我们每周都需要向团队或者部门每个人发送自己的周报。由于工作的分散性，周报成了领导和其他人了解你工作最直接的方式。如果主管不能更好的了解你的工作，可能会影响到你的业绩考核。再者，让别人更好的了解你，是别人认可你的基础。在公司工作，不再是自己小打小闹，更多时候需要跟很多人一起合作。就前端来说，通常需要跟PM、产品、设计、交互、后端、测试打交道。总结自己不仅可以促进跟伙伴的合作，也能理清自己的思路。有时候，一个人手上同时并行若干个项目，如果不加以协调安排，往往工作的效率就会很低。另外，我们还可以把平时遇到的技术问题加以总结。&lt;/p&gt;
&lt;h2 id=&quot;书面化表达&quot;&gt;&lt;a href=&quot;#书面化表达&quot; class=&quot;headerlink&quot; title=&quot;书面化表达&quot;&gt;&lt;/a&gt;书面化表达&lt;/h2&gt;&lt;p&gt;我看过很多招聘，都优先考虑有自己的技术博客的人。这并不是没有道理的，听懂一件事，深入理解一件事，和用文字表述出来是三种不同的境界和能力。&lt;/p&gt;
&lt;p&gt;在大公司里，毫不夸张的说，能人异士实在太多。怎么样让你从中脱颖而出则成为成功的关键。作为一个PM，你需要通过文字来汇报项目的进度。作为PD，你需要用文字去感染别人去关注你的产品。作为一个技术人员，你要通过文字来分享一些技术的积累，还要编写技术文档，一个好的文档能让推广你的技术方案事半功倍。一旦你的技术被别人所采用，那么别人认可你是迟早的事情。&lt;/p&gt;
&lt;h2 id=&quot;谈话技巧&quot;&gt;&lt;a href=&quot;#谈话技巧&quot; class=&quot;headerlink&quot; title=&quot;谈话技巧&quot;&gt;&lt;/a&gt;谈话技巧&lt;/h2&gt;&lt;p&gt;留心观察就会发现，公司里的很多人都很有口才。也许是这样一个工作氛围锻炼出来的。这个情况主要表现在，第一，能够清晰的表述自己的观点。第二，能够说服别人接受你的观点。第三，能够较好的组织语言，安排好表述的次序，先说什么再说什么最后说什么，让别人很容易的理解你表述的内容。这些技巧也不是一蹴而就的，需要在平时说话过程中多加思考，谨言慎行。谈话技巧这个话题太大，三言两语很难说全面。不过很重要的一点是，说话需要分场合，如果是正式的场合，尽量要使用陈述的语气去表明一个事实，表达自己的诉求，最好能够加上一些合理的解决方案等等。而不能带着自己的主观想法批判的去说明一件事。&lt;/p&gt;
&lt;p&gt;争取多参加一些分享，在台上分享可以更好的展示你的能力和魅力。同时，做一次分享你的收获远比观众来的更多。&lt;/p&gt;
&lt;p&gt;当然，在平时工作中也不需要过分的严肃，在基本礼仪的基础之上，如果能有一些诙谐那就更哗众取宠了。不过这大都跟性格有一定关系，倒不必强求。&lt;/p&gt;
&lt;h2 id=&quot;学会主动&quot;&gt;&lt;a href=&quot;#学会主动&quot; class=&quot;headerlink&quot; title=&quot;学会主动&quot;&gt;&lt;/a&gt;学会主动&lt;/h2&gt;&lt;p&gt;每个人都想加薪升职，但需求有限，并不是所有人都可以如愿以偿。如果无法学会怎样去主导一个项目，那可能需要做很长时间的螺丝钉。在公司，从表面上看可能大家都差不多，但如果看级别，每个人都参差不齐。那么如何学会主导？我觉得需要在平时工作中多加思考，积极的提出自己的想法，给团队提供合理的建议。不要只会听，只会做，更要有主见。哪怕是领导的想法，也可能存在一些纰漏，我们可以进行更深入的考虑，并及时的提出自己的看法。&lt;/p&gt;
&lt;p&gt;作为一个有主导能力的人，往往还需要一定的管理能力，需要能够合理的安排任务，协调工作进度，解决问题并进行决策。&lt;/p&gt;
&lt;p&gt;久而久之，你就会形成爱思考的习惯，能常常积极主动的在团队发言。用不了多久，别人就会对你刮目相看，觉得你是个靠谱的人，可以胜任一些重要的工作。这样一来，升职加薪就可以提上议程了。&lt;/p&gt;
&lt;h2 id=&quot;最后说两句&quot;&gt;&lt;a href=&quot;#最后说两句&quot; class=&quot;headerlink&quot; title=&quot;最后说两句&quot;&gt;&lt;/a&gt;最后说两句&lt;/h2&gt;&lt;p&gt;不论在学校还是职场，都需要不断地去学习，留心观察，取长补短。所以在今后的日子，我也需要不断的去丰富和提高自己。技术依然不会放松，因为这是我最热爱做的事情，但绝不能一心只做技术，个人的能力更需要注重。提高你的技术，奉献你的热情，展现你的能力，这也是师兄对我的期待，共勉！&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近从公司离职返校，好多人过来问我实习情况，一些人是因为好奇，另一些人希望我分享经验。这段时间确实有一些收获，由于没有总结只好搪塞。早上正好有空，好好梳理一下并展望和规划一下今后的发展，与君共勉。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阿里巴巴前端开发实习总结</title>
    <link href="http://www.dobest.me/blog/2015/09/25/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://www.dobest.me/blog/2015/09/25/阿里巴巴前端开发实习总结/</id>
    <published>2015-09-24T16:00:00.000Z</published>
    <updated>2016-06-12T07:57:05.000Z</updated>
    
    <content type="html">&lt;p&gt;短暂的两个月实习转眼间就结束了，回想第一天来报到的场景还历历在目。很庆幸能有这样一次宝贵的机会来到阿里，来到FGT这个大家庭同大家一起学习，我想这注定会是一段珍贵难忘的经历。说到总结，在这两个月里自己对业务的了解、团队合作、项目的流程和沟通方面以及个人技术都有很大的收获。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;总结工作&quot;&gt;&lt;a href=&quot;#总结工作&quot; class=&quot;headerlink&quot; title=&quot;总结工作&quot;&gt;&lt;/a&gt;总结工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Clink浮屏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当初师兄安排这个工作之后，我花两个小时完成了demo。虽然是一个小日常，但是并没有自己想象的那么简单。不仅需要跟后端商量控制浮窗的接口、兼容现有的后台系统，还需要不断的打磨一些细节，然后上日常，上预发，最后才发布。发布之后又需要根据线上实际的表现进行修改。看似一个简单的日常，其实包含了许多流程，也从中学习到规范和严谨的重要性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在线协作Markdown编辑器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是属于一个创新的小日常，起初没有多想就开始动手做，后面发现实现起来其实有很多细节的问题需要考虑，导致实现的demo体验不太好。后来翻阅一些资料，也参考了别人的一些实现，才把这个功能基本实现了，要真正实现良好的文本实时协作功能难点主要在于如何定制一个编辑器前端，纯文本的实现难度在于同步的差异化算法或Operational Transformation(OT)算法，这也让自己意识到今后应该更加注重基础算法的培养。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阿暖梦想跑道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是我完成的第一个完整的项目，经历了从视觉评审到项目构建、开发、联调、测试等各个阶段。这也是自己觉得实现地还不错的一个作品，能够比较清晰的组织和控制流程，测试过程中也很少有功能性的bug。更重要的是从这个项目中，我学会了应该怎样优雅地定制接口，怎样将flexbox、modulex、xTemplate运用到生产环境中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;梦想团-服务提效：TODOLIST&amp;amp;详情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实习一个月之后，就投入精力跟着@石霸师兄一起开发TODOLIST&amp;amp;详情，一开始觉得这对自己是个不小的挑战，而且时间上也比较紧张，还好有师兄不厌其烦的指导和帮助才能顺利地按时完成任务。项目初期，我很快学了一下Angular.js，第一次做比较复杂的前端项目，出于今后的维护和项目的稳定性考虑，需要不断地思考，尝试抽象更灵活的组织方式。在这个项目开发中，我也经常跟开发、交互、测试同学讨论实现方案。这真正让我感受到自己不再仅仅是一个实习生，我也可以很好的融入到项目开发的氛围中去。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;写在最后&quot;&gt;&lt;a href=&quot;#写在最后&quot; class=&quot;headerlink&quot; title=&quot;写在最后&quot;&gt;&lt;/a&gt;写在最后&lt;/h4&gt;&lt;p&gt;千言万语唯有感谢，感谢所有师兄师姐在工作和生活上的关心和帮助，感谢@清羽@常胤让我在大二的夏天能有这样一次宝贵的经历，感谢@石霸师兄不仅仅在技术上给予我良好的引导和鼓励，提供建议和方案，不厌其烦地帮助我解决一些困难，更多的是教诲我如何为人处事，独当一面，如何更好的规划自己将来的发展，如何在提高技术的同时也不断提升自己的软实力。我想这将是未来人生一笔宝贵的财富。&lt;/p&gt;
&lt;p&gt;总结自己，在平时工作中我也发现自己有很多不足，发现自己和别人的差距，在这样一个优秀的团体，时刻需要不断的学习和总结，同时也希望自己能更有自信一些，能更积极主动地提出自己的见解，开放心态。&lt;/p&gt;
&lt;p&gt;短短的60天，还没来得及跟大家更好的了解彼此，就要说再见了，很高兴认识你们这一帮良师益友，期待今后我们有缘再相聚！最后祝各位工作顺利，一切都好，大家中秋节快乐~~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;短暂的两个月实习转眼间就结束了，回想第一天来报到的场景还历历在目。很庆幸能有这样一次宝贵的机会来到阿里，来到FGT这个大家庭同大家一起学习，我想这注定会是一段珍贵难忘的经历。说到总结，在这两个月里自己对业务的了解、团队合作、项目的流程和沟通方面以及个人技术都有很大的收获。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native构建本地视图组件</title>
    <link href="http://www.dobest.me/blog/2015/05/10/React%20Native%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E8%A7%86%E5%9B%BE%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.dobest.me/blog/2015/05/10/React Native构建本地视图组件/</id>
    <published>2015-05-09T16:00:00.000Z</published>
    <updated>2016-06-12T08:29:50.000Z</updated>
    
    <content type="html">&lt;p&gt;在使用React Native开发App的过程中，我们可能需要调用RN没有实现的原生视图组件或第三方组件。甚至，我们可以把本地模块构造成一个React Native组件，提供给别人使用。由于我自己开发中遇到了这样的问题，于是通过查看源码和一些资料总结出了构建的一个流程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果是调用本地的Api，那么可以直接使用&lt;code&gt;RCTBridgeModule&lt;/code&gt;进行访问，目前已经实现了对Swift的支持，详见文档(&lt;a href=&quot;http://wiki.jikexueyuan.com/project/react-native/native-modules.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文&lt;/a&gt;，&lt;a href=&quot;http://facebook.github.io/react-native/docs/nativemodulesios.html#content&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文(较新)&lt;/a&gt;)。我们这里讲的是如何进行本地视图组件的封装。下面进入正题：&lt;/p&gt;
&lt;p&gt;要构建本地组件，我们要继承&lt;code&gt;RCTViewManager&lt;/code&gt;这个类，以及使用JavaScript进行接口封装。为了不增加教程的篇幅，我们以简单的Swich组件为例。&lt;/p&gt;
&lt;p&gt;首先，我们需要使用obj-c或者swift封装好组件的接口。&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RCTSwitch&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UISwitch&lt;/span&gt;    //继承&lt;span class=&quot;title&quot;&gt;UISwitch&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; wasOn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后实现&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;RCTSwitch.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;RCTEventDispatcher.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;UIView+React.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RCTSwitch&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setOn:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)on animated:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _wasOn = on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; setOn:on animated:animated];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;RCTSwitchManager-h&quot;&gt;&lt;a href=&quot;#RCTSwitchManager-h&quot; class=&quot;headerlink&quot; title=&quot;RCTSwitchManager.h&quot;&gt;&lt;/a&gt;RCTSwitchManager.h&lt;/h3&gt;&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;RCTViewManager.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RCTSwitchManager&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;RCTViewManager&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个视图管理器的头文件，命名规范为 视图名称+Manager. 视图名称可以加上自己的前缀，这里最好避免使用RCT前缀，除非你想给官方pull request.&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;RCTSwitchManager.h&quot;&lt;/span&gt;    // 首先导入头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;RCTBridge.h&quot;&lt;/span&gt;    //进行通信的头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;RCTEventDispatcher.h&quot;&lt;/span&gt;    //事件派发，不导入会引起Xcode警告&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;RCTSwitch.h&quot;&lt;/span&gt;    //第三方组件的头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;UIView+React.h&quot;&lt;/span&gt;    //若使用React封装的UIView(例如reactTag)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是实现的部分：&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RCTSwitchManager&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_MODULE()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RCTSwitch *switcher = [[RCTSwitch alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [switcher addTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(onChange:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     forControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventValueChanged&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; switcher;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)onChange:(RCTSwitch *)sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sender.wasOn != sender.on) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bridge.eventDispatcher sendInputEventWithName:&lt;span class=&quot;string&quot;&gt;@&quot;topChange&quot;&lt;/span&gt; body:@&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;@&quot;target&quot;&lt;/span&gt;: sender.reactTag,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;string&quot;&gt;@&quot;value&quot;&lt;/span&gt;: @(sender.on)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sender.wasOn = sender.on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_VIEW_PROPERTY(onTintColor, &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_VIEW_PROPERTY(tintColor, &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_VIEW_PROPERTY(thumbTintColor, &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_VIEW_PROPERTY(on, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RCT_EXPORT_VIEW_PROPERTY(enabled, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里首先调用&lt;code&gt;ECT_EXPORT_MODULE()&lt;/code&gt;的宏，让模块接口暴露给JavaScript，然后我们必须定义&lt;code&gt;- (UIView *)view&lt;/code&gt; 这个方法来创建并返回组件视图，同时我们对视图事件进行监听。&lt;br&gt;紧接着我们实现了&lt;code&gt;- (void)onChange:(RCTSwitch *)sender&lt;/code&gt;这个处理回调，&lt;code&gt;target&lt;/code&gt;就是视图组件的一个实例，最后我们通过事件派发器的&lt;code&gt;sendInputEventWithName&lt;/code&gt;方法来包装事件，其中”topChange”映射到UIManager中的&lt;code&gt;onChange&lt;/code&gt;事件，也对应到我们组件的&lt;code&gt;onChange&lt;/code&gt;属性详见&lt;strong&gt;./React/Modules/RCTUIManager.m&lt;/strong&gt;文件。&lt;/p&gt;
&lt;figure class=&quot;highlight obj-c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;topChange&quot;&lt;/span&gt;: @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;@&quot;phasedRegistrationNames&quot;&lt;/span&gt;: @&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;@&quot;bubbled&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;@&quot;onChange&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;@&quot;captured&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;@&quot;onChangeCapture&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文件的最后的&lt;code&gt;RCT_EXPORT_VIEW_PROPERTY()&lt;/code&gt;这个宏来设置该组件接受的参数及其类型。js中没有的类型，将会被自动类型转换。&lt;/p&gt;
&lt;p&gt;下面使用JavaScript对本地组件进行封装，&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 导入本地方法的封装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; NativeMethodsMixin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;NativeMethodsMixin&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// React属性的类型系统&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; PropTypes = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;ReactPropTypes&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 导入React&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;React&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 视图属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactIOSViewAttributes = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;ReactIOSViewAttributes&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 样式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; StyleSheet = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;StyleSheet&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用该方法生成本地组件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createReactIOSNativeComponentClass = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;createReactIOSNativeComponentClass&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用该方法进行视图属性的合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; merge = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;merge&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;紧接着，我们通过&lt;code&gt;createReactIOSNativeComponentClass&lt;/code&gt;创建RCTSwitch类。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; RCTSwitch = createReactIOSNativeComponentClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 指定有效的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validAttributes: rkSwitchAttributes,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 类名，与RCTSwitchManager相对应&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uiViewClassName: &lt;span class=&quot;string&quot;&gt;&#39;RCTSwitch&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 暴露该组件的相关属性，使用merge方法合并了UIView中的所有属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rkSwitchAttributes = merge(ReactIOSViewAttributes.UIView, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  onTintColor: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  tintColor: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  thumbTintColor: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  on: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enabled: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;validAttributes&lt;/code&gt;中的属性对应的值若类型为number, boolean, string类型时，设置为true即可。复杂的数据类型，我们应使用 differ 函数。&lt;/p&gt;
&lt;p&gt;最后我们来创建组件类，这里先声明一些数据类型&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; SWITCH = &lt;span class=&quot;string&quot;&gt;&#39;switch&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type DefaultProps = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  value: boolean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  disabled: boolean;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type Event = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是类方法的抽象&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; SwitchIOS = React.createClass(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//导入本地方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mixins: [NativeMethodsMixin],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//设置prop类型，保证组件能够被正确使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  propTypes: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//定义默认的props&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getDefaultProps()&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  _onChange()&amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在类中应该进行&lt;code&gt;prop&lt;/code&gt;的类型和默认值的声明，当使用不当时，将会出错警告，这也保证程序的健壮性，类型详见 &lt;a href=&quot;https://facebook.github.io/react/docs/reusable-components.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;。下面是具体的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mixins: [NativeMethodsMixin],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  propTypes: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value: PropTypes.bool,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    disabled: PropTypes.bool,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onValueChange: PropTypes.func,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    onTintColor: PropTypes.string,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thumbTintColor: PropTypes.string,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tintColor: PropTypes.string,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getDefaultProps: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;DefaultProps&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      value: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      disabled: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_onChange: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;event: Event&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//通过event.nativeEvent传递本地事件给视图组件，这些事件是我们前面定义在obj-c中的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.onChange &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.onChange(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.onValueChange &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.onValueChange(event.nativeEvent.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 保证属性的值确实被改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.refs[SWITCH].setNativeProps(&amp;#123;on: &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.props.value&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;RCTSwitch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 来自ReactIOSViewAttributes.UIView的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ref=&amp;#123;SWITCH&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        style=&amp;#123;[styles.rkSwitch, this.props.style]&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 来自RCTSwitchManager.m中导出的属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        enabled=&amp;#123;!this.props.disabled&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        on=&amp;#123;this.props.value&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onTintColor=&amp;#123;this.props.onTintColor&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        thumbTintColor=&amp;#123;this.props.thumbTintColor&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tintColor=&amp;#123;this.props.tintColor&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // RCTSwitchManager.m中导出的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        onChange=&amp;#123;this._onChange&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到此，我们就把RCTSwitch组件封装好了。如果要做成第三方组件，我们还需要把本地代码打包成静态库和xocdeproj文件。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在使用React Native开发App的过程中，我们可能需要调用RN没有实现的原生视图组件或第三方组件。甚至，我们可以把本地模块构造成一个React Native组件，提供给别人使用。由于我自己开发中遇到了这样的问题，于是通过查看源码和一些资料总结出了构建的一个流程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript语言精粹阅读笔记(函数)</title>
    <link href="http://www.dobest.me/blog/2015/04/22/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0(%E5%87%BD%E6%95%B0)/"/>
    <id>http://www.dobest.me/blog/2015/04/22/JavaScript语言精粹阅读笔记(函数)/</id>
    <published>2015-04-21T16:00:00.000Z</published>
    <updated>2016-06-12T07:54:52.000Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/img/JavaScript-good-part-func.jpeg&quot; alt=&quot;JavaScript语言精粹阅读笔记(函数)&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/img/JavaScript-good-part-func.jpeg&quot; alt=&quot;JavaScript语言精粹阅读笔记(函数)&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript语言精粹阅读笔记(1~3)</title>
    <link href="http://www.dobest.me/blog/2015/04/17/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0(1~3)/"/>
    <id>http://www.dobest.me/blog/2015/04/17/JavaScript语言精粹阅读笔记(1~3)/</id>
    <published>2015-04-16T16:00:00.000Z</published>
    <updated>2016-06-12T07:51:10.000Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://dobest.qiniudn.com/JavaScript语言精粹1.jpeg&quot; alt=&quot;阅读笔记&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://dobest.qiniudn.com/JavaScript语言精粹1.jpeg&quot; alt=&quot;阅读笔记&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟登录教务处查询成绩</title>
    <link href="http://www.dobest.me/blog/2015/04/08/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%95%99%E5%8A%A1%E5%A4%84%E6%9F%A5%E8%AF%A2%E6%88%90%E7%BB%A9/"/>
    <id>http://www.dobest.me/blog/2015/04/08/模拟登录教务处查询成绩/</id>
    <published>2015-04-07T16:00:00.000Z</published>
    <updated>2016-06-12T07:52:45.000Z</updated>
    
    <content type="html">&lt;p&gt;在我们学校有一个“东大小秘书”的微信应用，可以利用它直接查询成绩，十分方便。于是我也想着自己去实现一个，这并没有很大的难度。关键是需要通过验证码认证。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这里无非就是模拟登录教务处然后抓取数据，之后进行HTML解析即可。比较有难度的验证码破解，考虑到验证码并不是太复杂，可以使用第三方OCR库进行识别。经过对node的这方面的考察之后，发现了一个&lt;code&gt;dv&lt;/code&gt;的第三方库，对&lt;code&gt;tesseract&lt;/code&gt;进行了封装，使用起来十分方便，唯一缺憾就是目前仅支持到&lt;code&gt;node v0.10&lt;/code&gt;版本。&lt;/p&gt;
&lt;p&gt;话不多说，下面开始动手。&lt;/p&gt;
&lt;p&gt;由于考虑到今后可能提供公众服务，这里手动搭建了一个HTTP服务器。GET的方式进行查询。地址构造如下： &lt;code&gt;/?id=xxx&amp;amp;pw=xxx&lt;/code&gt;   ，获取到用户名和密码之后直接进入到查询环节。这里查询步骤有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取验证码&lt;/li&gt;
&lt;li&gt;验证码识别&lt;/li&gt;
&lt;li&gt;尝试登录&lt;/li&gt;
&lt;li&gt;获得成绩HTML数据&lt;/li&gt;
&lt;li&gt;解析成绩数据&lt;/li&gt;
&lt;li&gt;返回成绩JSON数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了控制程序异步流程，这里我使用了Promise(Bluebird)来组织代码。查询模块代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id, pw&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; defer = &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;.defer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getVerifyCode(id, pw)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .then(login)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .then(fetchScore)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .then(HTMLParser)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;json&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                defer.resolve(json);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err === &lt;span class=&quot;string&quot;&gt;&#39;CODE-ERROR&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    init();    &lt;span class=&quot;comment&quot;&gt;// 错误递归&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err === &lt;span class=&quot;string&quot;&gt;&#39;LOGIN-ERROR&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    init();     &lt;span class=&quot;comment&quot;&gt;// 同上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err === &lt;span class=&quot;string&quot;&gt;&#39;PW-ERROR&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    defer.reject(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;string&quot;&gt;&#39;password_error&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; defer.promise;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查询过程可能存在 &lt;strong&gt;验证码错误&lt;/strong&gt;，&lt;strong&gt;登录失败&lt;/strong&gt;, &lt;strong&gt;密码错误&lt;/strong&gt;等错误。如果遇到前两种错误则递归重新进行查询，密码错误则返回错误信息给用户。&lt;/p&gt;
&lt;h3 id=&quot;获取并解析验证码&quot;&gt;&lt;a href=&quot;#获取并解析验证码&quot; class=&quot;headerlink&quot; title=&quot;获取并解析验证码&quot;&gt;&lt;/a&gt;获取并解析验证码&lt;/h3&gt;&lt;p&gt;我们知道验证码的原理就是服务器随机生成字符串然后返回给用户并将验证码写入服务器session中，用户输入之后与服务器session中的字符串进行验证从而判断是否正确。而session的原理是根据用户请求时夹带的cookie进行用户的甄别。所以我们利用cookie即可完成登录的操作。获取验证码的同时需要获取服务器返回的cookie值，作为用户的唯一标识。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getVerifyCode = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id ,pw&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cookie = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            host:&lt;span class=&quot;string&quot;&gt;&quot;202.118.31.197&quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            path:&lt;span class=&quot;string&quot;&gt;&quot;/ACTIONVALIDATERANDOMPICTURE.APPPROCESS&quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method:&lt;span class=&quot;string&quot;&gt;&quot;get&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            headers:&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;Content-Length&quot;&lt;/span&gt;:contents.length,          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;Cookie&quot;&lt;/span&gt;: cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; req = http.request(options,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chunks = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cookie = res.headers[&lt;span class=&quot;string&quot;&gt;&quot;set-cookie&quot;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];     &lt;span class=&quot;comment&quot;&gt;// 获取并存储cookie, 也可以写入缓存，加速查询。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.on(&lt;span class=&quot;string&quot;&gt;&quot;data&quot;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;chunk&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                chunks.push(chunk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            res.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imgBuff = Buffer.concat(chunks);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// 利用dv解析验证码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; image = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; dv.Image(&lt;span class=&quot;string&quot;&gt;&#39;jpg&#39;&lt;/span&gt;, imgBuff);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tesseract = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; dv.Tesseract(&lt;span class=&quot;string&quot;&gt;&#39;eng&#39;&lt;/span&gt;, image);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; verifyCode = tesseract.findText(&lt;span class=&quot;string&quot;&gt;&#39;plain&#39;&lt;/span&gt;).trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; len = verifyCode.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(len !== &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    reject(&lt;span class=&quot;string&quot;&gt;&#39;CODE-ERROR&#39;&lt;/span&gt;);    &lt;span class=&quot;comment&quot;&gt;// 验证码明显有错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               id: id,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               pw: pw,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               cookie: cookie,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               verifyCode: verifyCode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    resolve(obj);    &lt;span class=&quot;comment&quot;&gt;// 验证码可能正确，先到下一步去&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        req.write(contents);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        req.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上利用了&lt;strong&gt;http.request&lt;/strong&gt;模块对服务器发起GET请求，成功获取验证码并尝试解析它。以上代码需要注意一个Buffer的处理。不要对Buffer进行相加，正确的做法应该是将每一块数据放入数组中，最后合并数组得到Buffer完整数据。&lt;/p&gt;
&lt;h3 id=&quot;尝试登录&quot;&gt;&lt;a href=&quot;#尝试登录&quot; class=&quot;headerlink&quot; title=&quot;尝试登录&quot;&gt;&lt;/a&gt;尝试登录&lt;/h3&gt;&lt;p&gt;利用上一步得到的cookie和验证码字符串尝试进行用户登录。使用POST请求，在headers内夹带cookie字段，然后构造一个请求体，然后请求。之后使用&lt;strong&gt;iconv-lite&lt;/strong&gt;对文档进行解码。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;res.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; decodedBody = iconv.decode(Buffer.concat(chunk), &lt;span class=&quot;string&quot;&gt;&#39;gbk&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(decodedBody.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;script&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// getCode();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// return;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(decodedBody.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;您的密码不正确&#39;&lt;/span&gt;)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            reject(&lt;span class=&quot;string&quot;&gt;&#39;PW-ERROR&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            reject(&lt;span class=&quot;string&quot;&gt;&#39;LOGIN-ERROR&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolve(cookie);    &lt;span class=&quot;comment&quot;&gt;// 传cookie给下一步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解码之后需要判断一下错误，可能存在上一环节的验证码错误或者用户的密码错误。如果没有错误则进行下一步。这里需要将cookie传入下一步，这个时候使用该cookie就可以进行后台操作了。&lt;/p&gt;
&lt;h3 id=&quot;获取成绩页面数据&quot;&gt;&lt;a href=&quot;#获取成绩页面数据&quot; class=&quot;headerlink&quot; title=&quot;获取成绩页面数据&quot;&gt;&lt;/a&gt;获取成绩页面数据&lt;/h3&gt;&lt;p&gt;到了这一步就很简单了，夹带cookie，GET请求成绩页面的数据。进行解码，然后传入&lt;code&gt;HTMLParser()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;解析HTML数据&quot;&gt;&lt;a href=&quot;#解析HTML数据&quot; class=&quot;headerlink&quot; title=&quot;解析HTML数据&quot;&gt;&lt;/a&gt;解析HTML数据&lt;/h3&gt;&lt;p&gt;上一步我们得到了成绩页面的HTML数据，我们需要对代码进行处理从而得到我们需要的成绩信息。node中有一个&lt;code&gt;cheerio&lt;/code&gt;库，可以像jQuery一样操作HTML DOM。这里感觉自己用的不是很恰当，感觉过程有点麻烦。看官稍微看看就行，这个也很容易使用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; HTMLParser = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;html&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $ = cheerio.load(html);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; score = $(&lt;span class=&quot;string&quot;&gt;&#39;.color-rowNext&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ascore = $(&lt;span class=&quot;string&quot;&gt;&#39;.color-row&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ret = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; score.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; course = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mark = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(! (score[i][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;)) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            course = score[i][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;].trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mark = score[i][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;].trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ret.push(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                course: course,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                score: mark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; ascore.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; course = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mark = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(! (ascore[i][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;)) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            course = ascore[i][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;].trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mark = ascore[i][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;children&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ret.push(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                course: course,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                score: mark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resolve(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(ret));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里我们就成功的获取到了成绩啦。在操作的过程中需要对错误进行处理，使得用户能一次性得到准确的成绩数据。&lt;/p&gt;
&lt;p&gt;最后，我们把数据模块封装，给服务器模块调用即可。我把代码放到Github上了，有兴趣的可以看看。如有错误，欢迎指出。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ele828/neu_score_query&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;=&amp;gt;&lt;code&gt;程序源码&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在我们学校有一个“东大小秘书”的微信应用，可以利用它直接查询成绩，十分方便。于是我也想着自己去实现一个，这并没有很大的难度。关键是需要通过验证码认证。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>手机跑酷游戏开发小记</title>
    <link href="http://www.dobest.me/blog/2015/04/05/%E6%89%8B%E6%9C%BA%E8%B7%91%E9%85%B7%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.dobest.me/blog/2015/04/05/手机跑酷游戏开发小记/</id>
    <published>2015-04-04T16:00:00.000Z</published>
    <updated>2016-06-12T07:24:41.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XNzkzMjM2MTk2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;观看演示视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了参加比赛，这个暑假开发了这款跑酷类手机小游戏。虽然辛苦，也学到不少东西，至少作品还算满意吧。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;从准备到开发确实花了不少时间，虽说真正开发大概只有十来天的样子，前期也需要熟悉框架，了解开发的流程，团队开发的磨合等等。&lt;/p&gt;
&lt;p&gt;这款手游是基于&lt;code&gt;Cocos2d-JS&lt;/code&gt;开源引擎，通过SpiderMonkey + js-binding的方式调用底层&lt;code&gt;Cocos2d-x&lt;/code&gt;的引擎。&lt;/p&gt;
&lt;p&gt;可能有的人会质疑这样操作的效率，后来事实证明，这样的方式效率虽然有待改善，但至少也轻松虐了一番Canvas在手机的表现。&lt;/p&gt;
&lt;p&gt;本篇文章不过多的介绍  &lt;code&gt;cocos2d-js&lt;/code&gt;引擎的使用，而仅讨论一些心得。&lt;/p&gt;
&lt;p&gt;效率的问题一方面可能是引擎引起的，肯定也有开发者的问题。起初开发时没有过多的考虑游戏效率问题，到后来发布APK发现手机表现差强人意才进行了一些优化。优化主要考虑到以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;图像资源的预加载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;plist文件预加载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;减少粒子数目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;资源的复用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有其他的资源需要加载，例如动画资源等，但由于前期的疏忽加之时间紧迫，这次没有进行预加载。&lt;/p&gt;
&lt;h2 id=&quot;预加载实现&quot;&gt;&lt;a href=&quot;#预加载实现&quot; class=&quot;headerlink&quot; title=&quot;预加载实现&quot;&gt;&lt;/a&gt;预加载实现&lt;/h2&gt;&lt;p&gt;我们可以在游戏开始前的场景或者消耗少的地方进行资源预热，事先载入缓存中。这里只交代cc(cocos2d简称)的加载方式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cc.spriteFrameCache.addSpriteFrames(res.gold.plist); &lt;span class=&quot;comment&quot;&gt;//plist预加载方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*以下加载图片至内存*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取所有图像&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.prototype.endWith=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;s&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s==&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;||s==&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;||&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||s.length&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.substring(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length-s.length)==s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//变量获得图像,资源文件使用对象字面量嵌套的原因，略显啰嗦&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; res[i] == &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; res[i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(res[i] &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; res[i][j] == &lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!res[i][j].endWith(&lt;span class=&quot;string&quot;&gt;&quot;plist&quot;&lt;/span&gt;) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    !res[i][j].endWith(&lt;span class=&quot;string&quot;&gt;&quot;mp3&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        temp.push(res[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; res[i][j] == &lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!res[i][j].endWith(&lt;span class=&quot;string&quot;&gt;&quot;plist&quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; !res[i][j].endWith(&lt;span class=&quot;string&quot;&gt;&quot;mp3&quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    temp.push(res[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//载入内存，这步是关键&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; temp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc.textureCache.addImage(temp[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里主要使用两个方法,&lt;code&gt;cc.spriteFrameCache.addSpriteFrames(PLIST);&lt;/code&gt;和&lt;code&gt;cc.textureCache.addImage(IMAGE)&lt;/code&gt;进行载入。&lt;/p&gt;
&lt;h2 id=&quot;对象池资源复用&quot;&gt;&lt;a href=&quot;#对象池资源复用&quot; class=&quot;headerlink&quot; title=&quot;对象池资源复用&quot;&gt;&lt;/a&gt;对象池资源复用&lt;/h2&gt;&lt;p&gt;关于对象池，是我们讨论的重点。由于缺乏经验和游戏前辈指导，我们起初就选错了方式，对于跑酷，飞行等这些需要频繁重复使用同样对象的游戏来说，应该使用对象池的方式进行重复利用，提高效率。这里感谢一下俊文学长的点拨。&lt;/p&gt;
&lt;p&gt;虽说如此，我仍然犯了一个致命的错误，这个bug到最后上交作品仍没有解决，为时已晚。&lt;/p&gt;
&lt;p&gt;我先说我使用的方式，游戏开始时，产生一只&lt;strong&gt;小鸟&lt;/strong&gt;,一只&lt;strong&gt;青蛙&lt;/strong&gt;,若干个&lt;strong&gt;道具&lt;/strong&gt;，以及需要用到的大概20个左右的&lt;strong&gt;金币道具&lt;/strong&gt;，一次性全部载入内存，并加入场景中。角色奔跑之后，动态的根据条件和概率更新这些物体的位置，从而多次复用。其实想想这样的做法好像也挺好，但不幸的是我们游戏使用了Chipmunk物理引擎。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 物理引擎中频繁操作物体，删除或者移动body等操作容易造成空指针等一系列bug。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用js开发游戏确实非常便利，尤其是调试，所见即得。但要是发生例如操作内存的错误，却是那么无奈。其实最终我们也没有找到真正的原因，游戏运行一段时间就会自动崩溃退出，崩溃的原因为 &lt;em&gt;EXC_BAD_ACCESS&lt;/em&gt;，指针访问了一块无权的访问的内存。但我采用频繁移动body的方式进行复用确实过于暴力。cc中有个对象缓冲池，我们可以利用它进行对象复用。&lt;/p&gt;
&lt;h2 id=&quot;编写支持cc-pool的类&quot;&gt;&lt;a href=&quot;#编写支持cc-pool的类&quot; class=&quot;headerlink&quot; title=&quot;编写支持cc.pool的类&quot;&gt;&lt;/a&gt;编写支持cc.pool的类&lt;/h2&gt;&lt;p&gt;首先，类中必须包含&lt;code&gt;unuse()&lt;/code&gt;和&lt;code&gt;reuse()&lt;/code&gt;函数，当你将&lt;code&gt;unuse()&lt;/code&gt;函数放入缓冲池中时，&lt;code&gt;cc.pool&lt;/code&gt;将会调用该函数；当你从缓冲池中检索一个对象，并使用给定参数对其初始化时，&lt;code&gt;cc.pool&lt;/code&gt;则将调用&lt;code&gt;reuse()&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;下面是一个名为MySprite的类。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; MySprite = cc.Sprite.extend(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _hp: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _sp: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _mp: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ctor: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;f1, f2, f3&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._super(s_grossini);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initData(f1, f2, f3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;initData: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;f1, f2, f3&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._hp = f1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._mp = f2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._sp = f3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unuse: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._hp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._mp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._sp = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setVisible(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.removeFromParent(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reuse: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;f1, f2, f3&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.initData(f1, f2, f3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setVisible(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MySprite.create = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;f1, f2, f3&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MySprite(f1, f2, f3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MySprite.reCreate = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;f1, f2, f3&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pool = cc.pool;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pool.hasObj(MySprite))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pool.getFromPool(MySprite, f1, f2, f3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;  MySprite.create(f1, f2, f3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实无非就是需要的时候加载一下，设置可见，不使用的时候设置不可见并从层中移除即可。官网的&lt;a href=&quot;http://cn.cocos2d-x.org/tutorial/show?id=1316&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;教程&lt;/a&gt;略有出错，这里稍作修改。我们的代码不用考虑到&lt;code&gt;retain()&lt;/code&gt;和&lt;code&gt;release()&lt;/code&gt;等内存管理，原因是引擎已经帮助我们进行了管理。&lt;/p&gt;
&lt;h2 id=&quot;往对象池添加对象&quot;&gt;&lt;a href=&quot;#往对象池添加对象&quot; class=&quot;headerlink&quot; title=&quot;往对象池添加对象&quot;&gt;&lt;/a&gt;往对象池添加对象&lt;/h2&gt;&lt;p&gt;cc.pool.putInPool(object);&lt;br&gt;putInPool函数将调用object.unuse()，并将其放到cc.pool中以备后面使用。&lt;/p&gt;
&lt;h2 id=&quot;在对象池中检索对象&quot;&gt;&lt;a href=&quot;#在对象池中检索对象&quot; class=&quot;headerlink&quot; title=&quot;在对象池中检索对象&quot;&gt;&lt;/a&gt;在对象池中检索对象&lt;/h2&gt;&lt;p&gt;当你想要从缓冲池中获取一个对象时，你可以通过给getFromPool方法传递类名和参数得到一个可用的对象或者空对象。在对象被返回之前，缓冲池将调用reuse函数，并用参数args来初始化该对象。&lt;/p&gt;
&lt;h2 id=&quot;检查是否存在有效对象&quot;&gt;&lt;a href=&quot;#检查是否存在有效对象&quot; class=&quot;headerlink&quot; title=&quot;检查是否存在有效对象&quot;&gt;&lt;/a&gt;检查是否存在有效对象&lt;/h2&gt;&lt;p&gt;var exist = cc.pool.hasObj(“MySprite”);&lt;/p&gt;
&lt;h2 id=&quot;从cc-pool中删除对象&quot;&gt;&lt;a href=&quot;#从cc-pool中删除对象&quot; class=&quot;headerlink&quot; title=&quot;从cc.pool中删除对象&quot;&gt;&lt;/a&gt;从cc.pool中删除对象&lt;/h2&gt;&lt;p&gt;cc.pool.removeObj(object);&lt;/p&gt;
&lt;h2 id=&quot;清空缓冲池&quot;&gt;&lt;a href=&quot;#清空缓冲池&quot; class=&quot;headerlink&quot; title=&quot;清空缓冲池&quot;&gt;&lt;/a&gt;清空缓冲池&lt;/h2&gt;&lt;p&gt;cc.pool.drainAllPools();&lt;/p&gt;
&lt;p&gt;当切换游戏场景时，在旧场景中的对象可能将不再有用。可以清空对象池节约内存开支。&lt;code&gt;CC.POOL&lt;/code&gt;的内部实现也很简单，其实就是将当前对象弹入数组中保存起来，需要的时候再进行抽取即可。&lt;/p&gt;
&lt;h2 id=&quot;提高游戏可玩性&quot;&gt;&lt;a href=&quot;#提高游戏可玩性&quot; class=&quot;headerlink&quot; title=&quot;提高游戏可玩性&quot;&gt;&lt;/a&gt;提高游戏可玩性&lt;/h2&gt;&lt;p&gt;老实说，我平时并不怎么玩游戏。从以前做互相网站的角度来说，与用户的交互显得非常重要。这方面需要与美术、音乐做到完美配合。我喜欢做类似互动这一类的工作，我喜欢贴近去感受用户的需求。这次做这个手游，我也尽量把整个游戏做&lt;strong&gt;活&lt;/strong&gt;，其实市场上的游戏已经都做到了最基本的这一点。&lt;br&gt;游戏好不好玩，不仅需要创意，更要考虑到场景设置，道具安排，游戏的触控体验等等方面。&lt;br&gt;最后还要感谢一下yfwz学长能够屈尊跟我组队参加比赛，而且在开发游戏上也下了功夫，关键还能提供技术支持啊，赞！&lt;br&gt;大概就是这些了，做游戏真的是个体力活，尤其是对我这样一个有点&lt;em&gt;强迫症&lt;/em&gt;的人来说，容不得一点不好啊。不过，过程倒也是蛮有趣的，至少也算是一次新的尝试吧。:P&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XNzkzMjM2MTk2.html&quot;&gt;观看演示视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了参加比赛，这个暑假开发了这款跑酷类手机小游戏。虽然辛苦，也学到不少东西，至少作品还算满意吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记三</title>
    <link href="http://www.dobest.me/blog/2015/04/01/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>http://www.dobest.me/blog/2015/04/01/JavaScript高级程序设计笔记三/</id>
    <published>2015-03-31T16:00:00.000Z</published>
    <updated>2016-06-12T06:48:34.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;函数表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JS中定义函数有两种方式，一种是函数声明，另外一种是函数表达式。函数声明存在函数声明提升的过程，函数表达式则无此过程。&lt;/p&gt;
&lt;p&gt;匿名函数，也叫lamda函数。即function后没有标识符&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以下的代码在ECMAScript中属于无效语法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(“Hello”);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;say&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(“No”);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;应该使用匿名函数的方式来写：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; say;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  say = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(“Hello”);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  say = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	alert(“No”);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;JS中如果需要使用递归函数，那么应该使用arguments.callee来代替函数名，这样确保不会出现问题，最好不要直接填写自身函数名。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;函数表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JS中定义函数有两种方式，一种是函数声明，另外一种是函数表达式。函数声明存在函数声明提升的过程，函数表达式则无此过程。&lt;/p&gt;
&lt;p&gt;匿名函数，也叫lamda函数。即function后没有标识符&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记二</title>
    <link href="http://www.dobest.me/blog/2015/03/30/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://www.dobest.me/blog/2015/03/30/JavaScript高级程序设计笔记二/</id>
    <published>2015-03-30T03:45:31.000Z</published>
    <updated>2016-06-12T06:45:46.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;引用类型&lt;/strong&gt;&lt;br&gt;ECMAScript是面向对象的语言，但是并没用类的概念，因为没有类和接口。所以我们一般称之为引用类型。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以下是创建Array类型的几种方式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colors = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colors = [&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; values = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,]; &lt;span class=&quot;comment&quot;&gt;//这样会创建2或3项的数组（IE8或之前创建3个元素）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数组和对象使用字面量来定义时，不会调用构造函数&lt;/p&gt;
&lt;p&gt;数组对象如果超过了索引，它会自动增加长度&lt;/p&gt;
&lt;p&gt;数组中的length属性不是只读的，是可写的，可以通过修改length的值来移除末尾的项&lt;/p&gt;
&lt;p&gt;alert一个数组，会后台自动调用toString()方法，与其效果一致&lt;/p&gt;
&lt;p&gt;数组中null或undefined返回字符串时将以空字符串来表示&lt;/p&gt;
&lt;p&gt;数组中的栈方法使用&lt;code&gt;push()&lt;/code&gt; &lt;code&gt;pop()&lt;/code&gt; 队列方法使用&lt;code&gt;push()&lt;/code&gt; &lt;code&gt;shift()&lt;/code&gt; &lt;code&gt;unshift()&lt;/code&gt;是在第一个位置插入一直数值并返回数组长度&lt;/p&gt;
&lt;p&gt;数组中&lt;code&gt;sort()&lt;/code&gt;会调用每个数组项的&lt;code&gt;toString()&lt;/code&gt;方法，然后再按照升序来排序&lt;/p&gt;
&lt;p&gt;可以利用如下方法来对数字数组进行排序&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;values.sort(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value1, value2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value1 - value2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;concat()可以复制一个数组，还可以传入新的参数，放在元数组的末尾。&lt;code&gt;slice(1)&lt;/code&gt;从位置1开始复制到末尾，&lt;code&gt;slice(1, 4)&lt;/code&gt;，从1赋值到位置3结束。&lt;br&gt;&lt;code&gt;splice(0,2, &amp;quot;red&amp;quot;, &amp;quot;green&amp;quot;);&lt;/code&gt;  替换或者删除数组中的元素并返回一个被删除的元素的数组&lt;/p&gt;
&lt;p&gt;函数是对象，函数名是指针。定义函数的三种方式:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;val1,val2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val1+val2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;va1, val2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; val1+val2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;   &lt;span class=&quot;comment&quot;&gt;//这里有个分号，跟定义变量一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//不推荐这样的用法，性能比较低，解析了两次代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;val1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;val2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;return val1+val2&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码执行之前，解析器会执行 函数声明提升的过程，也就是说，函数的声明可以在调用之后。JS引擎会自动在执行前把声明提前。&lt;/p&gt;
&lt;p&gt;如果通过等价来声明函数表达式，并在之前调用。则会出现错误。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;arguments&lt;/code&gt;对象有一个calee的属性，该属性是一个指针，指向拥有这个arguments对象的函数&lt;/p&gt;
&lt;p&gt;函数有两个属性，&lt;em&gt;length&lt;/em&gt;和&lt;em&gt;prototype&lt;/em&gt;。length表示函数希望接受到的参数个数&lt;/p&gt;
&lt;p&gt;call(作用域, 每一次参数 )  apply(作用域，参数数组)  &lt;code&gt;bind(作用域)&lt;/code&gt; 这三个函数都可以改变函数中this所指代的作用域&lt;/p&gt;
&lt;p&gt;基本数据类型不是对象，但是会在后台执行基本包装类型的过程，这个与引用类型存在生存期的区别。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;引用类型&lt;/strong&gt;&lt;br&gt;ECMAScript是面向对象的语言，但是并没用类的概念，因为没有类和接口。所以我们一般称之为引用类型。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记一</title>
    <link href="http://www.dobest.me/blog/2015/03/29/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://www.dobest.me/blog/2015/03/29/JavaScript高级程序设计笔记一/</id>
    <published>2015-03-29T03:45:31.000Z</published>
    <updated>2016-06-12T06:39:03.000Z</updated>
    
    <content type="html">&lt;p&gt;阅读JavsScript高级程序设计（第三版）中记录一些个人感觉一些容易被忽视的知识点。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;JavaScript中可以使用字母，下划线以及$符号作为开头。&lt;/p&gt;
&lt;p&gt;JS中可以省略分号，但是不推荐。使用分号有三个好处:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;避免一些错误;&lt;/li&gt;
&lt;li&gt;增进解析的速度;&lt;/li&gt;
&lt;li&gt;可以通过删除空格来压缩JS代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JS函数中使用var声明的是局部变量，缺省var则是全局变量。但是不推荐使用缺省var的方式来声明全局变量，容易造成混乱。&lt;/p&gt;
&lt;p&gt;Undefined和Null类型是只有一个值的数据类型分别为 undefined和null。&lt;/p&gt;
&lt;p&gt;若强制输出一个未定义的变量，则会产生错误。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(message);  &lt;span class=&quot;comment&quot;&gt;//&quot;undefined&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(age);      &lt;span class=&quot;comment&quot;&gt;//Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对未声明的变量执行typeof操作符，也返回undefined值&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(age);    &lt;span class=&quot;comment&quot;&gt;//&quot;undefined&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(mess);   &lt;span class=&quot;comment&quot;&gt;//&quot;undefined&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;// &quot;object&quot;  原因null表示空对象指针。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; 派生于 &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;。所以&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Boolean类型中的字面量true、false与数字无关，并非1和0。&lt;/p&gt;
&lt;p&gt;ECMAScript会不失时机的将伪浮点数值转换成浮点类型累储存，从而节省一半的储存空间。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fNum = &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;//为1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fNum2 = &lt;span class=&quot;number&quot;&gt;10.0&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//为10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;JS中浮点数值最高精度为17位小数，该类型采用了IEEE754格式，IEEE754浮点计算有一个通病，即浮点的计算精确度存在一些问题。例如:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b=&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(a+b);   &lt;span class=&quot;comment&quot;&gt;//0.30000000000000004&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;因此不要做这样的判断 if(a+b == 0.3){}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数值的范围为 Number.MIN_VALUE - Number.MAX_VALUE 超出范围则变成 (-Infinity[Number.NEGATIVE_INFINITY] || Infinity[Number.POSITIVE_INFINITY]) 不能进行计算。&lt;/p&gt;
&lt;p&gt;ECMAScript中 任何数除以0 等到的NaN 并不会报错&lt;/p&gt;
&lt;p&gt;NaN 与任何数都不相等，包括本身。 NaN != NaN&lt;/p&gt;
&lt;p&gt;isNaN()会对传入的类型先进行转换成数字之后再进行判断。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;isNaN&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;HelloJs&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt;一元加操作符与&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;()一致&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ECMAScript中，用单引号和双引号引用字符串效果一致。但是不可以混用。&lt;br&gt;    var lang = “JAVA”&lt;br&gt;    lang = lang + “Script”;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;过程是创建一个长度为10的新字符串，然后填充JAVA和SCRIPT。最后删除两个没用的字符串，保留 lang = “JAVAScript”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果不需要传参的话，ECMAScript中可以省略var obj = new Object()的括号。&lt;br&gt;但是不推荐这样的用法。&lt;/p&gt;
&lt;p&gt;逻辑与是短路操作，即第一个操作数能够决定结果就不会再计算第二个操作数。逻辑或与此类似&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = (&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; undefinedVariable);    &lt;span class=&quot;comment&quot;&gt;//Error，中断程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(res);   &lt;span class=&quot;comment&quot;&gt;//不会被执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = (&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;amp;&amp;amp; undefinedVariable)  &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(res)  &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myObj = obj || backupObj;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种赋值模式，如果第一个变量不为null，返回第一个对象，否则返回第二个对象。&lt;/p&gt;
&lt;p&gt;加法中，如果只有一个操作数是字符串，那么将另一个操作数转换成字符串之后，两个字符串进行拼接.&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;string&quot;&gt;&quot;5&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(a+b);  &lt;span class=&quot;comment&quot;&gt;//&quot;55&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果有三个操作数，其中一个是字符串，则类似：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num1 = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num2 = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mess = &lt;span class=&quot;string&quot;&gt;&quot;The sum of 5 and 10 is &quot;&lt;/span&gt; +  num1 + num2;  &lt;span class=&quot;comment&quot;&gt;// ...+(num1 + num2); 这样才是得到15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(mess); &lt;span class=&quot;comment&quot;&gt;// The sum of 5 and 10 is 510&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;valueOf偏向于运算，toString偏向于显示。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在进行对象转换时（例如:alert(a)）,将优先调用toString方法，如若没有重写toString将调用valueOf方法，如果两方法都不没有重写，但按Object的toString输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在进行强转字符串类型时将优先调用toString方法，强转为数字时优先调用valueOf。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在有运算操作符的情况下，valueOf的优先级高于toString。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;任何一个数与NaN进行关系比较，均为false&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NaN != NaN&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际开发用不建议使用with(statement){}语句&lt;/p&gt;
&lt;p&gt;switch语句中使用的是全等操作符&lt;/p&gt;
&lt;p&gt;ECMAScript函数中arguments对象与数组类似（并非Array的实例），可以通过arguments[i]来访问参数。arguments.length来获取传入参数的个数，arguments唯一由传入参数决定，与形式参数无关。并且，可以通过arguments来进行函数的重载,它没有传统意义上的重载方式。&lt;br&gt;return语句可以缺省，如果没用return，默认返回一个undefined&lt;br&gt;如果定义了两个重名的函数，则该名字属于后定义的函数，后定义的函数覆盖了之前定义的函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JS中两种数据类型：基本类型值（赋值是复制）和引用类型值（地址的复制）&lt;br&gt;JS中函数的参数传递全部都是按值传递的&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;阅读JavsScript高级程序设计（第三版）中记录一些个人感觉一些容易被忽视的知识点。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
